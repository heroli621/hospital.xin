<?php
/*
 * 购物车 控制器
 * */
namespace app\shop\controller;


use app\model\Activity;
use app\model\CouponGet;
use app\model\GoodsShop;
use app\model\GoodsSpec;
use app\model\MemberCart;
use app\model\Orders;
use app\model\OrdersGoods;
use app\shop\validate\CartValidate;
use think\Db;
use think\Exception;
use think\facade\Request;


class Sale extends Base
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->assign('nav_alias','cart');
    }


    //购物车
    /*
     * array (size=1)
        0 =>
            array (size=3)
              'buy_num' => int 1
              'goods_id' => int 8
              'goods_spec_id' => int 12
     * */
    public function cart()
    {
        //获取商品列表
        $nt=time();
        $list=MemberCart::with(['buy'=>function($query){
            //已购商品数量
            $query->where('member_id',session('member.mid'));
        }])
            ->where('member_id',session('member.mid'))
            ->order('create_time desc')
            ->select()
            ->each(function ($item){
                $item['cart_id']=$item['id'];
                $item['spec_id']=$item['goods_spec_id'];
                return $item;
            })->toArray();
        //dump($list);exit;


        //dump($goods_list);exit;
        $goods_list=[];
        if(!count($list)){
            //获取活动商品
            $goods_ids=Activity::where('status',1)
                ->where('stop_time','>=',$nt)
                ->where('isdelete',0)
                ->column('goods_id');
            $activity_goods=GoodsShop::with('activity')
                ->field('id,goods_name,cover,price')
                ->where('id','in',$goods_ids)
                ->where('status','=',1)
                ->where('is_int','=',0)
                ->where('is_new','=',0)
                ->where('is_delete','=',0)
                ->order('top desc,sort desc,create_time desc')
                ->limit(2)
                ->select();
            //dump($activity_goods);
            //没有活动商品，获取普通商品推荐
            $recommend_goods=$activity_goods;
            if(!count($activity_goods)){
                $recommend_goods=GoodsShop::field('id,goods_name,cover,price')
                    ->where('status','=',1)
                    ->where('is_int','=',0)
                    ->where('is_new','=',0)
                    ->where('is_delete','=',0)
                    ->order('top desc,sort desc,create_time desc')
                    ->limit(2)
                    ->select();
                //dump($recommend_goods);
            }

            $this->assign('recommend_goods',$recommend_goods);
        }else{
            //dump($list);
            $goods_list=$this->getOrderData($list);
            //dump($goods_list);
            //处理商品剩余库存
            //dump($goods_list['list']);
            foreach ($goods_list['list'] as &$v){
                if($v['goods_id']) {
                    $v['inventory']=$this->residualInventory($v['goods_id']);
                }else{
                    unset($v);
                }
                if($v['spec_id']){
                    $v['spec_inventory']=$this->residualInventory($v['spec_id'],0);
                }
            }
        }
        $this->assign('goods_list',$goods_list);
        return view('cart');
    }

    //加入购物车
    public function cartAdd(){
        if(Request::isAjax()){
            $data=input('post.');
            $res=$this->cartAddAction($data);
            return json($res);
        }
    }

    //加入购物车
    public function cartAddAction($datas){
        if(!isset($datas[0])){
            $datas=[$datas];
        }
        try{
            foreach ($datas as $data){
                //判断商品是否会员专属，及会员等级是否符合
                $goods=GoodsShop::with('level')
                    ->find($data['goods_id']);
                if($goods->vip_level){
                    $member_level=Db::name('member')->where('id',session('member.mid'))->value('level_id');
                    if($member_level < $goods->vip_level){
                        throw new Exception("此商品为 {$goods->level_name} 会员专属商品");
                    }
                }
                //已购商品数量
                $buy_goods_num=OrdersGoods::hasWhere('orders',function($query){
                    $query->where('Orders.status','>',0);
                })
                    ->where('goods_id',$data['goods_id'])
                    ->where('OrdersGoods.member_id',session('member.mid'))
                    //->fetchSql(true)
                    ->sum('buy_num');
                //判断商品是否有正在进行的活动及限购
                $limits=Db::name('activity')
                    ->where('status',1)
                    ->where('goods_id',$data['goods_id'])
                    ->where('stop_time','>',time())
                    ->value('limits');
                if($limits){
                    if($buy_goods_num>=$limits){
                        throw new Exception('本商品最多只能购买'.$limits.'件');
                    }
                    $can_buy_num=$limits-$buy_goods_num;
                    $data['buy_num']=$can_buy_num>$data['buy_num']?$data['buy_num']:$can_buy_num;
                }

                //判断体验产品是否已消费过
                $experience=Db::name('goods')->where('id',$data['goods_id'])->value('experience');
                if($experience && $buy_goods_num > 0){
                    throw new Exception('体验商品只能体验一次');
                }

                $validate=new CartValidate();
                if(!$validate->check($data)){
                    throw new Exception($validate->getError());
                }
                //查询商品及规格是否存在
                $info=MemberCart::where('member_id',session('member.mid'))
                    ->where('goods_id',$data['goods_id'])
                    ->where('goods_spec_id',$data['goods_spec_id'])
                    ->find();
                if(!$info){
                    $re=MemberCart::create($data);
                    if(!$re){
                        throw new Exception('网络连接失败，稍后重试');
                    }
                }
            }

            $res['code']=0;
        }catch (Exception $e){
            $res['code']=1;
            $res['msg']=$e->getMessage();
        }
        return $res;

    }

    //购物车->下单页
    /*
     * array (size=1)
        0 =>
            array (size=3)
              'buy_num' => int 1
              'goods_id' => int 8
              'goods_spec_id' => int 12
     *
     *
     * */
    public function buy(){
        $data=input('post.goods_option','');
        $data=json_decode($data,true);
        //获取订单商品详情
        $goods_list=$this->getOrderData($data);
        $this->assign('goods_list',$goods_list);
        //dump($goods_list);exit;

        $nt=time();
        //获取会员默认收货地址
        $default_address=Db::name('member_address')
            ->where('member_id',session('member.mid'))
            ->order('default_addr desc,create_time desc')
            ->select();
        $this->assign('default_address',$default_address);

        //获取我的优惠券

        $me_coupon=CouponGet::withJoin(['coupons'=>function($query){
            $query->where('stop_time',['>',time()],['=',0],'or');
        }],'Left')
            ->where('member_id',session('member.mid'))
            ->where('rc_coupon_get.status',1)
            ->where('validity',['=',0],['>',$nt],'or')
            ->group('coupon_id')
            ->select();

        $this->assign('me_coupon',$me_coupon);
        //dump($me_coupon);exit;
        $this->assign('is_int',0);
        $this->assign('is_new',0);

        return view('order_submit');
    }

    //立即购买->下单页
    public function buyNow(){
        $data=input('post.','');

        //获取商品详情
        $goods=GoodsShop::with('level')
            ->find($data['goods_id']);

        $nt=time();
        //会员信息
        $member=Db::name('member')->field('id,level_id,integral,create_time')->find(session('member.mid'));
        //已购商品数量
        $buy_goods_num=OrdersGoods::hasWhere('orders',function($query){
            $query->where('Orders.status','>',0);
        })
            ->where('goods_id',$goods['id'])
            ->where('OrdersGoods.member_id',$member['id'])
            //->fetchSql(true)
            ->sum('buy_num');
        //return $buy_goods_num;
        //判断体验产品是否已消费过
        $experience=Db::name('goods')->where('id',$goods['id'])->value('experience');
        if($experience && $buy_goods_num > 0){
            return view('public/err',['err_msg'=>'体验商品只能体验一次']);
        }

        if(!$goods['vip_level'] && !$goods['is_new'] && !$goods['is_int']){

            //判断商品是否有正在进行的活动及限购
            $limits=Db::name('activity')
                ->where('status',1)
                ->where('goods_id',$data['goods_id'])
                ->where('stop_time','>',$nt)
                ->value('limits');
            if($limits){
                if($buy_goods_num>=$limits){
                    return view('public/err',['err_msg'=>'本商品最多只能购买'.$limits.'件']);
                }
                $can_buy_num=$limits-$buy_goods_num;
                $data['buy_num']=$can_buy_num>$data['buy_num']?$data['buy_num']:$can_buy_num;
            }

        }elseif($goods['vip_level']){
            //判断商品是否会员专属，及会员等级是否符合
            if($member['level_id'] < $goods->vip_level) {
                return view('public/err',['err_msg'=>"此商品为 {$goods->level_name} 会员专属商品"]);
            }
        }elseif($goods['is_new']){
            //判断是否新人
            if(($member['create_time']+24*3600*30) < $nt){
                return view('public/err',['err_msg'=>"此商品为新人专享商品"]);
            }
        }elseif($goods['is_int']){
            //判断会员积分是否足够
            if($goods['integral'] > $member['integral']){
                return view('public/err',['err_msg'=>"亲，您的积分不足无法兑换该商品"]);
            }
            $this->assign('integral',$goods['integral']);
        }
        $this->assign('is_int',$goods['is_int']);
        $this->assign('is_new',$goods['is_new']);

        //获取会员默认收货地址
        $default_address=Db::name('member_address')
            ->where('member_id',$member['id'])
            ->order('default_addr desc,create_time desc')
            ->select();
        $this->assign('default_address',$default_address);

        $goods_data=[$data];
        $goods_list=$this->getOrderData($goods_data);
        //dump($goods_list);exit;

        //获取我的优惠券
        $me_coupon=CouponGet::withJoin(['coupons'=>function($query){
            $query->where('stop_time',['>',time()],['=',0],'or');
        }],'RIGHT')
            ->where('member_id',$member['id'])
            ->where('rc_coupon_get.status',1)
            ->where('validity',['=',0],['>',$nt],'or')
            ->group('coupon_id')
            ->select();

        $this->assign('me_coupon',$me_coupon);

        $this->assign('goods_list',$goods_list);


        return view('order_submit');
    }


    //删除购物车商品ajax方法
    public function delGoods(){
        if(Request::isAjax()){
            $res['code']=-1;
            $id=input('id',0);
            $ids=input('ids',[$id]);
            if($this->delCart($ids)){
                $res['code']=0;
            }
            return json($res);
        }else{
            return view('public/404');
        }
    }

    //删除购物车商品->执行方法
    private function delCart($ids=[]){
        $re=Db::name('member_cart')->delete($ids);
        if($re){
            return true;
        }
        return false;
    }

    /*
     * array (size=1)
        0 =>
            array (size=3)
              'buy_num' => int 1
              'goods_id' => int 8
              'goods_spec_id' => int 12
     *
     *获取订单商品数据
     *
     * */
    private function getOrderData(Array $data){
        $goods_list=[];$total_money=0;$express_fee=0;
        foreach ($data as $v){
            $cart_id=isset($v['cart_id'])?$v['cart_id']:0;//商品
            $buy_goods_num=isset($v['buy_goods_num'])?$v['buy_goods_num']:0;//已购商品数量
            $goods_id=$v['goods_id'];//商品
            $spec_id=$v['spec_id'];//规格
            $buy_num=$v['buy_num'];//购买数量
            $limits=0;
            $activity_type=0;
            $mid=session('member.mid');
            //获取商品与规格
            $temp_goods_data=GoodsShop::find($goods_id);
            $temp_spec_data=GoodsSpec::find($spec_id);

            //获取原价与优惠价
            $price=0;$sale_price=0;$other_sale=0;$test='';
            //新人专享、会员专属商品不参加活动
            if($temp_goods_data['is_new'] && $temp_goods_data['vip_level']){
                $price=$temp_goods_data['price'];
                $sale_price=$temp_goods_data['vip_price'];
            }else{
                $price=$temp_spec_data?$temp_spec_data['price']:$temp_goods_data['price'];
                //查询商品是否有正在进行的活动
                $goods_activity=Db::name('activity')
                    ->where('status',1)
                    ->where('goods_id',$goods_id)
                    ->where('stop_time','>',time())
                    ->find();
                if($goods_activity){
                    $ac_sale=$price;
                    switch ($goods_activity['activity_type']){
                        case 1:
                            $ac_sale=$price-$goods_activity['sale'];
                            break;
                        case 2:
                            $ac_sale=$price*$goods_activity['sale']/100;
                            break;
                        case 3:
                            $other_sale=1;
                            $ac_sale='赠送积分：'.$goods_activity['sale'];
                            break;
                        case 4:
                            $other_sale=1;
                            $ac_sale='赠送优惠券：'.$goods_activity['sale'];
                            break;
                    }
                    $sale_price=$ac_sale;
                    $limits=$goods_activity['limits'];
                    $activity_type=$goods_activity['activity_type'];
                }else{
                    //新人专享、会员专享，不参加其他优惠,否则享受会员等级折扣
                    $vip_sale=$this->getMemberLevelSale($mid);
                    $sale_price=$price*$vip_sale/100;
                }
            }

            $goods_list[]=[
                'cart_id'=>$cart_id,
                'goods_id'=>$temp_goods_data['id'],
                'cover'=>$temp_goods_data['cover'],
                'goods_name'=>$temp_goods_data['goods_name'],
                'price'=>$price,
                'sale_price'=>$sale_price,
                'integral'=>$temp_goods_data['integral'],
                'inventory'=>$temp_goods_data['inventory'],
                'spec_inventory'=>isset($temp_spec_data['inventory'])?$temp_spec_data['inventory']:0,
                'limits'=>$limits,
                'activity_type'=>$activity_type,
                'spec_id'=>$spec_id,
                'spec_name'=>$temp_spec_data?$temp_spec_data['spec_name']:'',
                'buy_num'=>$buy_num,
                'buy_goods_num'=>$buy_goods_num,
                'is_int'=>$temp_goods_data['is_int'],
                'other_sale'=>$other_sale,
            ];
            if($other_sale){
                $total_money+=$buy_num*$price;
            }else{
                $total_money+=$buy_num*$sale_price;
            }
            $express_fee=$temp_goods_data['express_fee']>$express_fee?$temp_goods_data['express_fee']:$express_fee;
        }
        return ['list'=>$goods_list,'total_money'=>$total_money,'express_fee'=>$express_fee];
    }

    //提交订单（下单）
    /*
     *
     * 'address_id' => string '16' (length=2)
  'goods_info' => string '[{"cart_id":0,"goods_id":3,"price":"0.00","sale_price":"0.00","integral":4500,"spec_name":"","buy_num":"1","is_int":1,"other_sale":0}]' (length=236)
  'coupon_get_id' => string '' (length=0)

     * */
    public function subOrder(){
        if(!Request::isPost()){
            return view('public/err',['err_msg'=>'访问的内容不存在','type'=>1]);
        }
        $data=input('post.',[]);
        if(empty($data)){
            return view('public/err',['err_msg'=>'访问的内容不存在','type'=>1]);
        }
        //dump($data);exit;
        $is_int=0;  //是否积分商品
        $mid=session('member.mid');
        $express_fee=0; //快递费，取最大值
        $order_money=0; //订单总金额
        $sale_money=0;  //优惠券优惠金额
        $integral=0;  //兑换所需积分
        $goods_ids=[];  //商品
        $nt=time();

        //订单商品信息
        $goods_info=json_decode($data['goods_info'],true);
        $order_goods_data=[];
        foreach ($goods_info as $val){
            $activity_id=0;
            $temp_goods=Db::name('goods')
                ->field('cover,images,top,sort,create_time,update_time',true)
                ->find($val['goods_id']);
            $temp_spec=Db::name('goods_spec')
                ->find($val['spec_id']);
            //积分商品
            if($temp_goods['is_int']){
                $activity_id=0;
                $price=0;
                $sale_price=0;
                $is_int=1;
                $integral=$temp_goods['integral'];
                //判断积分是否充足
                $member_integral=Db::name('member')->where('id',$mid)->value('integral');
                if($member_integral < $integral){
                    return view('public/err',['err_msg'=>'您的积分不足','type'=>1]);
                }
            }else{
                $price=$temp_spec?$temp_spec['price']:$temp_goods['price'];
                $sale_price=$price;
                //查询商品是否有正在进行的活动
                $goods_activity=Db::name('activity')->where('status',1)
                    ->where('goods_id',$temp_goods['id'])
                    ->where('stop_time','>',time())
                    ->find();
                if($goods_activity){
                    $activity_id=$goods_activity['id'];
                    $ac_sale=$price;
                    switch ($goods_activity['activity_type']){
                        case 1:
                            $ac_sale=$price-$goods_activity['sale']*100;
                            break;
                        case 2:
                            $ac_sale=$price*$goods_activity['sale']/100;
                            break;
                    }
                    $sale_price=$ac_sale;
                }elseif(!$temp_goods['is_new'] && !$temp_goods['vip_level']){
                    //新人专享、会员专享，不参加其他优惠,否则享受会员等级折扣
                    $vip_sale=$this->getMemberLevelSale($mid);
                    $sale_price=ceil($price*$vip_sale/100);
                }

            }

            //计算订单金额
            $order_money+=$sale_price*$val['buy_num'];

            //快递费，取最大值
            $express_fee=$temp_goods['express_fee']>$express_fee?$temp_goods['express_fee']:$express_fee;

            //商品信息
            $order_goods_data[]=[
                'member_id'=>$mid,
                'goods_id'=>$temp_goods['id'],
                'goods_spec_id'=>$val['spec_id'],
                'buy_num'=>$val['buy_num'],
                'price'=>$price/100,
                'sale_money'=>$sale_price/100,
                'integral'=>$temp_goods['integral'],
                'get_integral'=>$is_int?0:$temp_goods['get_integral'],
                'activity_id'=>$activity_id,
            ];
            $goods_ids[]=$temp_goods['id'];
        }
        //是否使用优惠券
        if($data['coupon_get_id']){
            $coupon=CouponGet::with('coupon')->where('status',1)->find($data['coupon_get_id']);

            //dump($coupon);dump($order_money);exit;
            //注意此处模型因为获取器的原因，取出的金额单位是元，要*100换算为分
            if($coupon['need_money']*100 > $order_money){
                return view('public/err',['err_msg'=>'订单总金额不满足优惠券使用金额','type'=>1]);
            }

            $sale_money=$coupon['sale_money']*100;//优惠券减免金额
        }
        //支付金额
        $pay_money=$order_money-$sale_money+$express_fee;
        $code=0;
        //收货地址
        $address=Db::name('member_address')->find($data['address_id']);
        try{
            if(!$address){
                $code=1;
                throw new Exception('0');
            }
            //订单信息
            $order_data=[
                'order_no'=>$this->createOrderNo(),
                'member_id'=>$mid,
                'goods_type'=>1,
                'discounts_type'=>$data['coupon_get_id']?1:0,
                'money'=>$order_money,
                'pay_money'=>$pay_money,  //需支付金额
                'sale_money'=>$sale_money,
                'integral'=>$is_int?$integral:0,
                'coupon_id'=>$data['coupon_get_id']?$data['coupon_get_id']:0,
                'consignee'=>$address['realname'],
                'phone'=>$address['phone'],
                'province'=>$address['province'],
                'city'=>$address['city'],
                'region'=>$address['region'],
                'specific'=>$address['address'],
                'message'=>$data['message'],
                'express_fee'=>$express_fee,
                'is_int'=>$is_int
            ];

            //dump($order_data);dump($order_goods_data);exit;

            //开启事务
            Db::startTrans();

            //插入订单
            $o=Orders::create($order_data);
            if(!$o){
                throw new Exception('1');
            }
            $order_id=$o->id;
            //插入订单商品
            $re_add=$o->goods()->saveAll($order_goods_data);
            if(!$re_add){
                throw new Exception('2');
            }

            //清除购物车
            if(!empty($data['cart_id'])){
                $re_del=$this->delCart($data['cart_id']);
                if(!$re_del){
                    throw new Exception('3');
                }
            }
            //使用优惠券
            if($order_data['coupon_id']){
                $re_coupon=Db::name('coupon_get')
                    ->where('id',$data['coupon_get_id'])
                    ->update(['status'=>0,'update_time'=>$nt]);
                if(!$re_coupon){
                    throw new Exception('4');
                }
            }
            // 提交事务
            Db::commit();
            return redirect('/order_affirm/'.$order_id.'.html');
        }catch (Exception $e){
            // 回滚事务
            Db::rollback();
            if($code){
                return view('public/err',['err_msg'=>'亲，收货地址需要填写哦！','type'=>1]);
            }else{
                return view('public/err',['err_msg'=>'购买人数太多啦！需要排队哦！','type'=>1]);
            }
        }
    }

    //确认订单详情页
    public function orderAffirm(){
        $oid=input('id');
        $order_info=Orders::get($oid,'goods');
        if(!$order_info){
            return view('public/err',['err_msg'=>'无效的订单参数','type'=>1]);
        }
        if($order_info['status'] == -1){
            return view('public/err',['err_msg'=>'订单已过期，请您重新下单','type'=>1]);
        }
        if($order_info['status'] > 0){
            return view('public/err',['err_msg'=>'订单已处理，请您耐心等待','type'=>1]);
        }
        //处理订单商品
        $nt=time();
        foreach ($order_info['goods'] as &$v){
            $temp=Db::name('goods')->field('cover,goods_name,experience')->find($v['goods_id']);
            $temp['spec_name']='';
            if($v['goods_spec_id']){
                $temp['spec_name']=Db::name('goods_spec')->where('id',$v['goods_spec_id'])->value('spec_name');
            }
            $v['info']=$temp;
            //处理限购
            //已购商品数量
            $buy_goods_num=OrdersGoods::hasWhere('orders',function($query){
                $query->where('Orders.status','>',0);
            })
                ->where('goods_id',$v['goods_id'])
                ->where('OrdersGoods.member_id',$v['member_id'])
                //->fetchSql(true)
                ->sum('buy_num');
            //是否体验商品
            if($temp['experience'] && $buy_goods_num > 0){
                return view('public/err',['err_msg'=>'体验商品只能体验一次']);
            }else{
                //判断商品是否有正在进行的活动及限购
                $limits=Db::name('activity')
                    ->where('status',1)
                    ->where('goods_id',$v['goods_id'])
                    ->where('stop_time','>',$nt)
                    ->value('limits');
                if($limits){
                    if($buy_goods_num>=$limits){
                        return view('public/err',['err_msg'=>'本商品最多只能购买'.$limits.'件']);
                    }
                }
            }
        }
        $this->assign('order_info',$order_info);

        //验证账号余额
        $balance=Db::name('member')->where('id',session('member.mid'))->value('balance');
        $this->assign('balance',$balance/100);
        //dump($order_info);

        return view('order_affirm');
    }



    public function _empty()
    {
        return view('public/404');
    }

}
