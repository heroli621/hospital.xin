<?php
/*
 * 公共基础、验证登录 控制器
 * */
namespace app\shop\controller;


use think\Controller;
use think\Db;
use think\facade\Request;


class Base extends Controller
{
    //ajax返回值
    public $err=[
        'code'=>-1,
        'msg'=>'success',
    ];


    protected $appId='';
    protected $appSecret='';


    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        //获取商城配置
        if(!session('?config')){
            $config=Db::name('config')->where('type',2)->column('value','varname');
            session('config',$config);
        }

        $this->appId=session('config.app_id');
        $this->appSecret=session('config.app_secret');
        $nt=time();
        //添加访问记录
        if(!session('?visitStatus')){
            $this->visitLog();
        }
        /*
         * 验证登录状态 正式模式
         *
         */
        if(!session('?isLogin') || !session('?member.mid')){
            $code=input('code',0);
            if(!$code){
                $url=$this->getUrl(1);
                redirect($url)->send();exit;
            }
            $re=$this->getAccessToken($code);
            if($re !== 'SUCCESS'){
                $this->assign('errmsg',$re);
                view("public/errmsg")->send();exit;
            }
            //验证是否注册
            $member=Db::name('member')->field('id mid,nickname,realname,phone,openid,headimg,status')->where('openid',session('wxAuth.openid'))->find();
            if($member){
                if($member['status']){
                    session('isLogin',1);
                    session('member',$member);
                }else{
                    $this->assign('errmsg','抱歉您的账户已被冻结，若有问题可联系：'.session('config.com_tel'));
                    view("public/errmsg")->send();exit;
                }
            }else{
                $state=input('state');
                if($state=='base'){
                    $url=$this->getUrl(0);
                    redirect($url)->send();exit;
                }
                //注册
                $wx_user=$this->getUserInfo();
                if($wx_user !== 'SUCCESS'){
                    $this->assign('errmsg',$re);
                    view("public/errmsg")->send();exit;
                }
                //组装数据
                $member_data=[
                    'openid'=>session('wxUserInfo.openid'),
                    'nickname'=>session('wxUserInfo.nickname'),
                    'realname'=>session('wxUserInfo.nickname'),
                    'phone'=>'',
                    'address'=>session('wxUserInfo.province').session('wxUserInfo.city'),
                    'sex'=>session('wxUserInfo.sex'),
                    'headimg'=>session('wxUserInfo.headimgurl'),
                    'safe'=>substr(md5(session('wxUserInfo.openid').$nt),rand(0,25),6),
                    'create_time'=>$nt,
                ];
                //注册信息
                $mid=Db::name('member')->insertGetId($member_data);
                if($mid){
                    $member_data['mid']=$mid;
                    session('isLogin',1);
                    session('member',$member_data);
                }
                //分销关系
                $res=Db::name('member_distribution')->where('member_id',$mid)->find();
                if(!$res){
                    Db::name('member_distribution')->insert(['member_id'=>$mid,'create_time'=>$nt]);
                }
            }
        }else{
            //清空半年以前的消息记录
            $old_time=$nt-(6*30*24*3600);
            Db::name('message')->whereTime('create_time','<',$old_time)->delete();
            Db::name('message_delete')->whereTime('create_time','<',$old_time)->delete();
        }
        //*/
        /*
         * 测试阶段专用会员登录验证
         *
        if(!session('?isLogin') || !session('?member.mid')){
            $member=Db::name('member')->field('id mid,nickname,realname,phone,openid,headimg,status')->find(6);
            session('isLogin',1);
            session('member',$member);
        }

        $mid=session('member.mid');
        //实时获得用户状态
        $user_status=Db::name('member')->where('id',$mid)->value('status');
        if(!$user_status){//获取失败，账号被注销
            session(null);
            if(Request::isAjax()){
                $this->err['msg']="抱歉您的账户已被冻结，若有问题可联系：".session('config.com_tel');
                json($this->err)->send();exit;
            }else{
                $this->assign('errmsg',"抱歉您的账户已被冻结，若有问题可联系：".session('config.com_tel'));
                view("public/errmsg")->send();exit;
            }
        }
        //*/

        $this->assign('config',session('config'));
        //清理过期订单：过期时间2小时，清理间隔2小时
        if(!session('?out_time') || session('out_time')+2*3600<$nt){
            $out_time=$nt-2*3600;
            session('out_time',$out_time);
            $o=Db::name('orders')
                ->where('member_id',$mid)
                ->where('status',0)
                ->where('create_time','<',$out_time)
                ->field('coupon_id,id')
                ->select();
            if($o){
                $oids=[];
                $cids=[];
                foreach ($o as $v){
                    $oids[]=$v['id'];
                    if($v['coupon_id'])$cids[]=$v['coupon_id'];
                }
                //重置优惠券状态
                $this->resetCoupon($cids,$nt);
                //改变订单状态
                Db::name('orders')
                    ->whereIn('id',$oids)
                    ->setField('status',-1);
            }
        }
    }

    /*
     *重新获得授权地址
     * */
    private function getUrl($type=1){
        $uri=urlencode(Request::domain().Request::baseUrl());
        $scope=$type?'snsapi_base':'snsapi_userinfo';
        $state=$type?'base':'userinfo';
        $url= 'https://open.weixin.qq.com/connect/oauth2/authorize?appid='.$this->appId.'&redirect_uri='.$uri.'&response_type=code&scope='.$scope.'&state='.$state.'#wechat_redirect';
        return $url;
    }
    /*
     * 正确返回json
     * {
     *"access_token":"ACCESS_TOKEN",
     *"expires_in":7200,
     *"refresh_token":"REFRESH_TOKEN",
     *"openid":"OPENID",
     *"scope":"SCOPE"
     *}
     *
     * 错误返回json
     * {"errcode":40029,"errmsg":"invalid code"}
     * */
    public function getAccessToken($code){
        $url='https://api.weixin.qq.com/sns/oauth2/access_token?appid='.$this->appId.'&secret='.$this->appSecret.'&code='.$code.'&grant_type=authorization_code';
        $res=json_decode(file_get_contents($url),true);
        if(!isset($res['errcode'])){
            session('wxAuth',$res);
            return 'SUCCESS';
        }else{
            return $res['errmsg'];
        }
    }

    //刷新AccessToken
    public function refreshAccessToken(){
        $url='https://api.weixin.qq.com/sns/oauth2/refresh_token?appid='.$this->appId.'&grant_type=refresh_token&refresh_token='.session('wxAuth.refresh_token');
        $res=json_decode(file_get_contents($url),true);
        if(!isset($res['errcode'])){
            session('wxAuth',$res);
            return 'SUCCESS';
        }else{
            return $res['errmsg'];
        }
    }

    /*获取用户资料
     * 正确返回json
     *{
     *"openid":" OPENID",
     *"nickname": NICKNAME,
     *"sex":"1",
     *"province":"PROVINCE"
     *"city":"CITY",
     *"country":"COUNTRY",
     *"headimgurl":"http://thirdwx.qlogo.cn/mmopen/g3Mon",
     *"privilege":[ "PRIVILEGE1" "PRIVILEGE2"     ],
     *"unionid": "o6_bmasdasdsad6_2sgVt7hMZOPfL"
     *}
     *
     *错误返回json
     *
     *{"errcode":40003,"errmsg":" invalid openid "}
     *
    */
    public function getUserInfo(){
        $url='https://api.weixin.qq.com/sns/userinfo?access_token='.session('wxAuth.access_token').'&openid='.session('wxAuth.openid').'&lang=zh_CN';
        $res=json_decode(file_get_contents($url),true);
        if(!isset($res['errcode'])){
            session('wxUserInfo',$res);
            return 'SUCCESS';
        }else{
            return $res['errmsg'];
        }
    }

    /*
     *检验授权凭证（access_token）是否有效
     * 正确json
     *{ "errcode":0,"errmsg":"ok"}
     * 错误json
     * { "errcode":40003,"errmsg":"invalid openid"}
     * */
    public function checkAccessToken(){
        $url='https://api.weixin.qq.com/sns/auth?access_token='.session('wxAuth.access_token').'&openid='.session('wxAuth.openid');
        $res=json_decode(file_get_contents($url),true);
        if($res['errcode']==0){
            return true;
        }else{
            return false;
        }
    }


    //获取指定网站配置
    public function getSiteConfig($var_name){
        if(empty($var_name)){
            return false;
        }
        return Db::name('config')->where('varname',$var_name)->value('value');
    }

    //计算剩余库存
    public function residualInventory($id,$type=1,$mold=0){
        //剩余库存
        $table=$type==1?'goods':'goods_spec';
        $inventory=Db::name($table)->where('id',$id)->value('inventory');
        //已下单库存
        $map=[['status','=',0]];
        $map[]=$type==1?['goods_id','=',$id]:['goods_spec_id','=',$id];
        $order_inventory=Db::name('orders_goods')->where($map)->sum('buy_num');
        if($mold){
            return $order_inventory;
        }
        return $inventory-$order_inventory;
    }

    //获取会员等级或优惠
    public function getMemberLevelSale($mid,$type=0){
        $member_level=Db::name('member')->where('id',$mid)->value('level_id');
        if($type){
            return $member_level;
        }
        if($member_level){
            return Db::name('level')->where('level_id',$member_level)->value('level_sale');
        }
        return 100;
    }

    //获取未读消息数量
    public function getUnreadMessageNum($mid,$type=0){
        //已读消息
        $read_ids=Db::name('message_read')->where('member_id',$mid)->column('message_id');
        if($type==2){
            //返回已读消息id
            return $read_ids;
        }
        //已删消息
        $delete_ids=Db::name('message_delete')->where('member_id',$mid)->column('message_id');
        if($type==3){
            //返回已删消息id
            return $delete_ids;
        }

        $ids=array_unique(array_merge($read_ids,$delete_ids));

        if($type==1){
            //返回已读、已删消息id集合
            return $ids;
        }else{
            //返回未读数量
            $my_level=$this->getMemberLevelSale($mid,1);
            return Db::name('message')
                ->where('id','not in',$ids)
                ->where('member_id',['=',0],['=',$mid],'or')
                ->where('member_level',['=',0],['=',$my_level],'or')
                ->count();
        }
    }

    //重置优惠券状态
    public function resetCoupon($cids,$nt=0){
        return Db::name('coupon_get')->whereIn('id',$cids)->update(['status'=>1,'update_time'=>$nt]);
    }

    /*
     * 生成订单号
     * $goods_type 1，消费；2，充值；
     * */
    public function createOrderNo($goods_type=1){
        $hstr=$goods_type==1?'EXP':'REC';
        $mstr=date('YmdHis');
        $estr=str_pad(rand(1,999999),6,"0",0);
        return $hstr.$mstr.$estr;
    }

    //验证交易密码action
    public function checkPasswordAction($password,$member_id=0){
        $err=['code'=>1,'msg'=>'success'];
        $mid=$member_id?$member_id:session('member.mid');
        $m_info=Db::name('member')->field('id,password,safe')->find($mid);
        if(empty($m_info['password'])){
            $err['msg']='交易密码未设置，请前往个人中心设置密码！';
        }else{
            if($this->createPassword($mid,$password,$m_info['safe'])!==$m_info['password']){
                $err['msg']='交易密码错误！！！';
            }else{
                $err['code']=0;
            }
        }
        return $err;
    }
    //生成交易密码
    public function createPassword($mid,$password,$safe){
        return md5($mid.$password.$safe);
    }
    //添加访问记录
    protected function visitLog(){
        $data=[
            'ip'=>Request::ip(),
            'session_id'=>session_id(),
            'create_time'=>time()
        ];
        Db::name('visit')->insert($data);
        session('visitStatus',1);
    }
}
