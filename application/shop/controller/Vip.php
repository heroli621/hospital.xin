<?php
/*
 * 商品 控制器
 * */
namespace app\shop\controller;



use app\model\BrokerageLogs;
use app\model\ComboGoods;
use app\model\ComplimentaryGoods;
use app\model\CouponGet;
use app\model\Delivery;
use app\model\GoodsShop;
use app\model\Member;
use app\model\MemberAddress;
use app\model\MemberDistribution;
use app\model\MemberIntegral;
use app\model\MemberNursing;
use app\model\Orders;
use app\model\OrdersGoods;
use app\model\RechargeGoods;
use app\model\RechargeReturn;
use app\model\SmsLogs;
use app\shop\validate\AccountValidate;
use app\shop\validate\AddressValidate;
use think\Db;
use think\Exception;
use think\facade\Request;
use think\facade\Session;
use think\facade\Validate;


class Vip extends Base
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->assign('nav_alias','member');
    }


    //个人中心
    public function index()
    {
        $mid=session('member.mid');
        //个人信息
        $member=Member::field('password,safe',true)->find($mid);
        $this->assign('member',$member);

        //订单信息
        $orders=[];
        //待发货
        $orders['ship']=Db::name('orders')
            ->where([['is_delete','=',0],['member_id','=',session('member.mid')],['status','=',1]])
            ->count();

        //交易密码是否设置
        $pass=Db::name('member')->where('id',$mid)->value('password');

        $this->assign('pass',$pass?1:0);
        $this->assign('orders',$orders);
        $this->assign('message_num',$this->getUnreadMessageNum($mid));


        return view('mine');
    }

    //积分记录
    public function integralLog(){
        if(Request::isAjax()){
            $size=input('size');
            $data=MemberIntegral::where('member_id',session('member.mid'))->order('create_time desc')->paginate($size,true);
            if($data->isEmpty()){
                $this->err['msg']='data is empty';
            }else{
                $this->err['code']=0;
                $this->err['data']=$data->items();
            }
            return json($this->err);
        }else{
            return view('integral');
        }
    }

    //地址管理
    public function addressManage(){

        $data=Db::name('member_address')
            ->where('member_id',session('member.mid'))
            ->order('default_addr desc,create_time desc')
            ->select();

        $this->assign('data',$data);

        return view('address_manage');
    }

    //添加收货地址页
    public function addressAdd(){
        //区域信息
        $area_list=Db::name('area')
            ->field('id,name as value')
            ->where('pid',0)
            ->order('sort asc')
            ->select();
        foreach ($area_list as &$va){
            $tem_arr=Db::name('area')
                ->field('id,name as value')
                ->where('pid',$va['id'])
                ->order('sort asc')
                ->select();
            foreach ($tem_arr as &$vo){
                $vo['childs']=Db::name('area')
                    ->field('id,name as value')
                    ->where('pid',$vo['id'])
                    ->order('sort asc')
                    ->select();
            }
            $va['childs']=$tem_arr;
        }
        $this->assign('area_list',json_encode($area_list));

        return view('address_add');
    }

    //编辑收货地址
    public function addressEdit(){
        //区域信息
        $area_list=Db::name('area')
            ->field('id,name as value')
            ->where('pid',0)
            ->order('sort asc')
            ->select();
        foreach ($area_list as &$va){
            $tem_arr=Db::name('area')
                ->field('id,name as value')
                ->where('pid',$va['id'])
                ->order('sort asc')
                ->select();
            foreach ($tem_arr as &$vo){
                $vo['childs']=Db::name('area')
                    ->field('id,name as value')
                    ->where('pid',$vo['id'])
                    ->order('sort asc')
                    ->select();
            }
            $va['childs']=$tem_arr;
        }
        $this->assign('area_list',json_encode($area_list));

        //地址信息
        $id=input('id');
        $info=Db::name('member_address')->find($id);
        $this->assign('info',$info);

        return view('address_edit');
    }

    //保存收货地址
    public function addressSave(){
        if(Request::isAjax()){
            $data=input('post.');
            $area=explode(' ',trim($data['area']));
            //dump($data);dump($area);exit;

            try{
                $validate=new AddressValidate();
                if(!$validate->check($data)){
                    throw new Exception($validate->getError());
                }
                $province=!empty($area)?array_shift($area):'';
                $city=!empty($area)?array_shift($area):'';
                $region=!empty($area)?array_shift($area):'';
                $save_data=[
                    'realname'=>$data['realname'],
                    'phone'=>$data['phone'],
                    'province'=>$province,
                    'city'=>$city,
                    'region'=>$region,
                    'address'=>$data['info'],
                ];
                if(isset($data['id'])){
                    //修改
                    $info=MemberAddress::get($data['id']);
                    $res=$info->save($save_data);
                    if(!$res){
                        throw new Exception('哎呀，人太多啦！稍后再试哦！');
                    }
                }else{
                    //添加

                    //判断地址是否存在
                    $re=Db::name('member_address')->where($save_data)->find();
                    if($re){
                        throw new Exception('亲，您已经添加过相同的收货地址喽！');
                    }
                    $res =MemberAddress::create($save_data);
                    if(!$res){
                        throw new Exception('哎呀，人太多啦！稍后再试哦！');
                    }
                }

                $this->err['code']=0;
                $this->err['data']=$res;
            }catch (Exception $e){
                $this->err['msg']=$e->getMessage();
                return json($this->err);
            }
            return json($this->err);
        }else{
            return view('public/404');
        }
    }

    //删除地址
    public function addressDel(){
        if(Request::isAjax()){
            $id=input('id');
            $re=Db::name('member_address')->delete($id);
            if($re){
                $this->err['code']=0;
            }else{
                $this->err['msg']='操作太频繁，稍后再试';
            }
            return json($this->err);
        }
    }

    //设置默认地址
    public function changeAddress(){
        if(Request::isAjax()){
            $id=input('id');
            Db::name('member_address')->where('member_id',session('member.mid'))->setField('default_addr',0);
            if(Db::name('member_address')->where('id',$id)->setField('default_addr',1)){
                $this->err['code']=0;
            }
            return json($this->err);
        }
    }

    //我的优惠券
    public function coupon(){
        if(Request::isAjax()){
            $size=input('size');
            $type=input('type');
            $map=[];
            switch ($type){
                case 1: //未使用
                    $map[]=[];
                    break;
                case 2: //已使用
                    $map[]=[];
                    break;
                case 3: //已过期
                    $map[]=[];
                    break;

            }
            $nt=time();
            if($type==1){
                $data=CouponGet::withJoin(['coupons'=>function($query){
                    $query->where('stop_time',['=',0],['>',time()],'or');
                }],"RIGHT")
                    ->where('member_id',session('member.mid'))
                    ->where('rc_coupon_get.status',1)
                    ->where('validity',['=',0],['>',$nt],'or')
                    ->order('create_time desc')
                    ->paginate($size,true);
            }elseif($type==2){
                $data=CouponGet::with('coupons')
                    ->where('member_id',session('member.mid'))
                    ->where('status',0)
                    ->order('create_time desc')
                    ->paginate($size,true);
            }else{
                $data=CouponGet::withJoin(['coupons'=>function($query){
                    $nt=time();
                    $query->whereOr('stop_time',['<>',0],['<',$nt],'and')->whereOr('rc_coupon_get.validity',['<>',0],['<',$nt],'and');
                }],"RIGHT")
                    ->where('member_id',session('member.mid'))
                    ->where('rc_coupon_get.status',1)
                    ->order('create_time desc')
                    ->paginate($size,true);
            }
            //dump($data);

            if($data->isEmpty()){
                $this->err['msg']='data is empty';
            }else{
                $this->err['code']=0;
                $this->err['data']=$data->items();
            }
            return json($this->err);
        }else{
            echo time();
            return view('coupon');
        }
    }

    //粉丝管理
    public function fans(){
        if(Request::isAjax()){
            $size=input('size');
            $type=input('type',1);
            $field=$type==1?'up_one_id':'up_two_id';
            $mid=session('member.mid');
            $fans=MemberDistribution::with('member')
                ->field('*,'.$field.' as up_id')
                ->where($field,$mid)
                ->paginate($size,true)->each(function($item){
                    $item['fans_num']=Db::name('member_distribution')
                        ->where('up_one_id|up_two_id',$item['member_id'])->count();
                    $item['fans_brokerage']=number_format(Db::name('brokerage_logs')
                            ->where('child_id',$item['member_id'])
                            ->where('member_id',$item['up_id'])
                            ->sum('brokerage')/100,2);
                    return $item;
                });

            if($fans->isEmpty()){
                $this->err['msg']='data is empty';
            }else{
                $this->err['code']=0;
                $this->err['data']=$fans->items();
            }

            return json($this->err);
        }else{
            $mid=session('member.mid');
            //个人信息
            $member=Db::name('member')
                ->find($mid);
            $this->assign('member',$member);

            //粉丝个数
            $fans_one_num=Db::name('member_distribution')
                ->where('up_one_id',$mid)
                ->count();
            $fans_two_num=Db::name('member_distribution')
                ->where('up_two_id',$mid)
                ->count();
            $this->assign('fans_one_num',$fans_one_num);
            $this->assign('fans_two_num',$fans_two_num);

            //粉丝订单数
            $fans_order_num=Db::name('brokerage_logs')
                ->where('member_id',$mid)
                ->count();
            $this->assign('fans_order_num',$fans_order_num);

            //已提现
            $withdraw_money=Db::name('member_withdraw')
                ->where('member_id',$mid)
                ->where('status','<>',4)
                ->sum('money');
            $this->assign('withdraw_money',number_format($withdraw_money/100,2));


            return view('fans');
        }
    }

    //查看粉丝订单
    public function showFans(){
        $mid=input('id');
        if(Request::isAjax()){
            $size=input('size');
            $data=BrokerageLogs::where('child_id',$mid)
                ->order('create_time desc')
                ->paginate($size,true);

            if($data->isEmpty()){
                $this->err['msg']='data is empty';
            }else{
                $this->err['code']=0;
                $this->err['data']=$data->items();
            }

            return json($this->err);
        }else{

            $this->assign('mid',$mid);


            return view('fans_order');
        }
    }

    //邀请
    public function invite(){
        $mid=session('member.mid');
        $url=url("/invite/{$mid}",[],true,true);
        $this->assign('url',$url);
        return view('invite');
    }

    //提现收益
    public function withdraw(){
        //最小提现金额
        $min_money=$this->getSiteConfig('min_withdraw_money');
        $mid=session('member.mid');
        //收益余额
        $member=Member::find($mid);
        $earnings=$member->getData('earnings');
        //验证提现账号信息
        $account=Db::name('member_account')
            ->where('member_id',$mid)
            ->find();

        if(Request::isAjax()){
            $money=input('money');
            $password=input('password');
            $nt=time();
            //开启事务
            Db::startTrans();
            try{
                //验证交易密码
                $cp=$this->checkPasswordAction($password);
                if($cp['code']!=0){
                    throw new Exception($cp['msg']);
                }
                //验证最小提现金额
                if($money < $min_money){
                    throw new Exception('提现金额不足最小提现金额');
                }
                //验证余额是否充足
                if($money > ($earnings/100)){
                    throw new Exception('收益余额不足');
                }

                if(!$account){
                    throw new Exception('提现账户信息未设置');
                }

                //添加提现记录
                $save=[
                    'apply_no'=>'w'.date('YmdHis').$mid,
                    'member_id'=>$mid,
                    'money'=>$money*100,
                    'old_earnings'=>$earnings,
                    'residue_earnings'=>$earnings-$money*100,
                    'realname'=>$account['realname'],
                    'account'=>$account['account'],
                    'bank'=>$account['bank'],
                    'create_time'=>$nt,
                ];
                if(!Db::name('member_withdraw')->insert($save)){
                    throw new Exception('操作用户过多，稍后再试');
                }

                //扣除收益余额
                $member->earnings=$earnings-$money*100;
                if(!$member->save()){
                    throw new Exception('操作用户过多，稍后再试');
                }

                //添加收益记录
                $earnings_data=[
                    'member_id'=>$mid,
                    'money'=>$money*100,
                    'type'=>2,
                    'des'=>'申请提现',
                    'create_time'=>$nt,
                ];
                if(!Db::name('earnings_logs')->insert($earnings_data)){
                    throw new Exception('收益记录处理失败');
                }

                //事务提交
                Db::commit();
                $this->err=['code'=>0,'msg'=>'提现成功,等待审核'];
            }catch (Exception $e){
                //事务回退
                Db::rollback();
                $this->err['msg']=$e->getMessage();
            }
            return json($this->err);
        }else{

            $this->assign('earnings',$earnings/100);
            $this->assign('min_money',$min_money);
            $this->assign('account',$account?1:0);
            $this->assign('pass',empty($member['password'])?0:1);


            return view('withdraw');
        }
    }

    //设置提现账户
    public function saveAccount(){
        if(Request::isAjax()){
            $data=input('post.');
            try{
                $mid=session('member.mid');
                //验证交易密码
                $cp=$this->checkPasswordAction($data['password']);
                if($cp['code']!=0){
                    throw new Exception($cp['msg']);
                }
                unset($data['password']);
                //验证提现账号信息
                $account=Db::name('member_account')
                    ->where('member_id',$mid)
                    ->find();
                if($account){
                    throw new Exception('提现账户已设置，无法重复设置');
                }
                $validate=new AccountValidate();
                if(!$validate->check($data)){
                    throw new Exception($validate->getError());
                }
                $data['bank']=!empty($data['bank'])?$data['bank']:'支付宝';
                $data['member_id']=$mid;
                $data['create_time']=time();
                if(!Db::name('member_account')->insert($data)){
                    throw new Exception('设置用户过多，稍后重试');
                }
                $this->err=['code'=>0,'msg'=>'提现账户设置成功'];
            }catch (Exception $e){
                $this->err['msg']=$e->getMessage();
            }
            return json($this->err);
        }
    }

    //提现记录
    public function withdrawLog(){
        if(Request::isAjax()){
            $size=input('size');
            $mid=session('member.mid');
            $data=Db::name('member_withdraw')
                ->where('member_id',$mid)
                ->order('create_time desc')
                ->paginate($size,true);

            if($data->isEmpty()){
                $this->err['msg']='data is empty';
            }else{
                $this->err['code']=0;
                $this->err['data']=$data->items();
            }

            return json($this->err);
        }else{
            return view('withdraw_log');
        }
    }

    //我的订单
    public function orders(){
        if(Request::isAjax()){
            $type=input('type',0);
            $size=input('size',2);
            $map=[
                ['is_delete','=',0],
                ['member_id','=',session('member.mid')],
                ['goods_type','=',1],//消费
            ];
            switch ($type){
                case 0: //全部
                    $map[]=['status','>=',0];
                    break;
                case 1: //待付款
                    $map[]=['status','=',0];
                    break;
                case 2: //待发货
                    $map[]=['status','=',1];
                    break;
                case 3: //待收货
                    $map[]=['status','=',2];
                    break;
                case 4: //未评价
                    $map[]=['status','=',99];
                    $map[]=['is_comment','=',0];
                    break;
            }
            $data=Orders::with(['goods'=>function($query){
                $query->with(['goods'=>function($query){$query->field('id,cover,goods_name,goods_type,complimentary,experience');}]);
            }])
                ->where($map)
                ->where(function ($query){
                    $query->whereOr('audit','>',0)->whereOr('orders_type','=',0);
                })
                ->order('create_time desc')
                ->paginate($size,true);
            //echo $data;
            if($data->isEmpty()){
                $this->err['msg']='data is empty';
            }else{
                $this->err['code']=0;
                $this->err['data']=$data->items();
            }
            return json($this->err);
        }else{
            $type=input('type',0);
            $this->assign('type',$type);


            return view('my_order');
        }

    }

    //查看商品详情
    public function goods(){
        $id=input('id');
        $type=input('type');
        $combos=ComboGoods::with('goods')->where('goods_id',$id)->select();
        $comps=[];
        if(!$type){
            $comps=ComplimentaryGoods::with('goods')->where('goods_id',$id)->select();
        }


        $this->assign('combos',$combos);
        $this->assign('comps',$comps);
        return view('goods');
    }

    //取消未支付订单deleteOrder
    public function cancelOrder(){
        if(Request::isAjax()){
            $id=input('id');

            //开启事务
            Db::startTrans();
            try{
                $info=Orders::get($id,'goods');
                if(!$info){
                    throw new Exception('无效的订单参数！');
                }
                $coupon_get_id=$info->coupon_id;
                $info->goods;   //手动加载关联模型，此步骤必须，否则无法关联删除。
                //删除订单
                $re=$info->together('goods')->delete();
                if(!$re){
                    throw new Exception('取消订单失败！');
                }
                if($coupon_get_id){
                    //重置优惠券状态
                    if(!$this->resetCoupon([$coupon_get_id])){
                        throw new Exception('重置优惠券失败！');
                    }
                }
                //提交事务
                Db::commit();

                $this->err['code']=0;
            }catch (Exception $e){
                //回退事务
                Db::rollback();
                $this->err['msg']=$e->getMessage();
            }
            return json($this->err);
        }
    }

    //再次购买
    public function againBuy(){
        if(Request::isAjax()){
            $oid=input('id');
            $goods_list=Db::name('orders_goods')
                ->field('goods_id,goods_spec_id,buy_num')
                ->where('orders_id',$oid)
                ->select();
            if(!empty($goods_list)){
                $sale=new Sale();
                $this->err=$sale->cartAddAction($goods_list);
            }
            return json($this->err);
        }
    }

    //签收（确认收货）
    public function signFor(){
        if(Request::isAjax()){
            $password=input('password');
            //验证交易密码
            $err=$this->checkPasswordAction($password);
            if($err['code']==0){
                //交易密码验证成功，更改订单状态
                $oid=input('id');
                $this->err=$this->ordersDispose($oid);
            }else{
                $this->err=$err;
            }
            return json($this->err);
        }
    }

    //查看物流
    public function showExpress(){
        $id=input('id');
        $delivery_id=Db::name('orders')->where('id',$id)->value('delivery_id');
        $info=Delivery::get($delivery_id);
        if(empty($info['express_no'])){
            $this->assign('info',$info);

            return view('express');
        }else{
            $url='https://m.kuaidi100.com/index_all.html?type='.$info['com'].'&postid='.$info['express_no'];
            return $this->redirect($url);
        }


    }

    //删除订单
    public function deleteOrder(){
        if(Request::isAjax()){
            $id=input('id');

            try{
                $info=Orders::get($id,'goods');
                if(!$info){
                    throw new Exception('无效的订单参数！');
                }

                //删除订单
                $info->is_delete=1;
                $re=$info->save();
                if(!$re){
                    throw new Exception('删除订单失败！');
                }
                $this->err['code']=0;
            }catch (Exception $e){

                $this->err['msg']=$e->getMessage();
            }
            return json($this->err);
        }
    }

    //评价商品
    public function comment(){
        if(Request::isAjax()){
            $data=input('post.goods');
            $anonymity=input('post.anonymity');
            $oid=input('post.oid');
            $mid=session('member.mid');
            $gid=[];$save=[];$nt=time();
            foreach ($data as $v){
                $save[]=[
                    'member_id'=>$mid,
                    'goods_id'=>$v['goods_id'],
                    'grade'=>$v['grade'],
                    'comment'=>$v['comment'],
                    'anonymity'=>$anonymity,
                    'create_time'=>$nt
                ];
                $gid[]=$v['id'];
            }
            if(Db::name('goods_evaluate')->insertAll($save)){
                Db::name('orders_goods')->whereIn('id',$gid)->setField('is_comment',1);
                Db::name('orders')->where('id',$oid)->setField('is_comment',1);
                $this->err['code']=0;

            }
            return json($this->err);

        }else{
            //获取未评价商品列表
            $id=input('id');
            $goods_list=OrdersGoods::with('goods')
                ->where('orders_id',$id)
                ->where('is_comment',0)
                ->select();
            $this->assign('goods_list',$goods_list);
            $this->assign('oid',$id);

            return view('comment');
        }
    }

    //我的消息
    public function message(){
        if(Request::isAjax()){
            $size=input('size');
            $mid=session('member.mid');
            $my_level=$this->getMemberLevelSale($mid,1);
            $ids=$this->getUnreadMessageNum($mid,3);
            if(empty($ids))$ids=[0];

            $data=Db::name('message')
                ->whereNotIn('id',$ids)
                ->where('member_id',['=',0],['=',$mid],'or')
                ->where('member_level',['=',0],['=',$my_level],'or')
                ->order('create_time desc')
                ->paginate($size,true);
            if(!$data->isEmpty()){
                $this->err['code']=0;
                $this->err['data']=$data->items();
            }
            return json($this->err);
        }else{
            return view('message');
        }
    }

    //删除消息
    public function messageDel(){
        if(Request::isAjax()){
            $type=input('type',2);
            $mid=session('member.mid');
            $nt=time();

            if($type==2){
                //清空已读
                try{
                    $ids=$this->getUnreadMessageNum($mid,2);
                    //清除个人已读消息
                    if(!empty($ids)){
                        if(!Db::name('message')->where('member_id','<>',0)->delete($ids)){
                            throw new Exception('删除消息失败！');
                        }
                        $oids=Db::name('message')->where('member_id','=',0)->whereIn('id',$ids)->column('id');
                        //清除已读记录
                        if(!Db::name('message_read')->where('member_id',$mid)->delete()){
                            throw new Exception('删除已读消息失败！');
                        }
                    }else{
                        $oids=Db::name('message')->where('member_id','=',0)->column('id');
                    }

                    //获取未删已读广播
                    if(!empty($oids)){
                        $datas=[];
                        foreach ($oids as $v){
                            $datas[]=[
                                'message_id'=>$v,
                                'member_id'=>$mid,
                                'create_time'=>$nt
                            ];
                        }
                        //添加删除已读广播
                        if(!Db::name('message_delete')->insertAll($datas)){
                            throw new Exception('删除广播消息失败！');
                        }
                    }
                    $this->err['code']=0;
                }catch (Exception $e){

                    $this->err['msg']=$e->getMessage();
                }
            }else{
                /*清空全部*/
                $my_level=$this->getMemberLevelSale($mid,1);
                //清除已读记录
                Db::name('message_read')->where('member_id',$mid)->delete();
                //清除个人消息
                Db::name('message')->where('member_id','=',$mid)->delete();

                $ids=$this->getUnreadMessageNum($mid,3);
                //获取未删广播
                if(!empty($ids)){
                    $oids=Db::name('message')
                        ->where('member_id','=',0)
                        ->where('member_level',['=',0],['=',$my_level],'or')
                        ->whereNotIn('id',$ids)
                        ->column('id');
                }else{
                    $oids=Db::name('message')
                        ->where('member_id','=',0)
                        ->where('member_level',['=',0],['=',$my_level],'or')
                        ->column('id');
                }
                if(!empty($oids)){
                    $datas=[];
                    foreach ($oids as $v){
                        $datas[]=[
                            'message_id'=>$v,
                            'member_id'=>$mid,
                            'create_time'=>$nt
                        ];
                    }
                    //添加删除广播
                    Db::name('message_delete')->insertAll($datas);
                }
                $this->err['code']=0;
            }

            return json($this->err);
        }
    }

    //查看消息
    public function readMsg(){
        if(Request::isAjax()){
            $id=input('id');
            $mid=session('member.mid');
            $re=Db::name('message_read')->where('member_id',$mid)->where('message_id',$id)->value('id');
            if(!$re){
                Db::name('message_read')->insert(['member_id'=>$mid,'message_id'=>$id,'create_time'=>time()]);
            }
            return json(['code'=>0]);
        }
    }

    //设置交易密码
    public function dealPassword(){
        $mid=session('member.mid');
        if(Request::isAjax()){
            $sms_code=input('sms_code');
            $password=input('password');
            $repassword=input('repassword');
            $nt=time();
            $safe=Db::name('member')->where('id',$mid)->value('safe');
            try{
                //验证两次密码是否一致
                if($password !== $repassword){
                    throw new Exception('两次输入的密码不一致');
                }
                //验证是否发送了短信验证码,及验证码是否过期
                if(!session('?sms') || (session('sms.lasttime')+300)<$nt){
                    throw new Exception('短信验证码已过期');
                }

                //验证短信验证码
                if($sms_code != session('sms.code')){
                    throw new Exception('短信验证码错误');
                }
                $save=[
                    'password'=>$this->createPassword($mid,$password,$safe),
                    'id'=>$mid,
                    'update_time'=>$nt
                ];
                if(!Db::name('member')->update($save)){
                    throw new Exception('操作用户过多，稍后重试');
                }
                //验证即销毁
                session('sms',null);

                $this->err['code']=0;
            }catch (Exception $e){
                $this->err['msg']=$e->getMessage();
            }
            return json($this->err);
        }else{
            //交易密码是否设置
            $pass=Db::name('member')->where('id',$mid)->value('password');
            if($pass){
                return $this->index();
            }
            return view('deal_password');
        }
    }

    //绑定手机
    public function bindMobile(){
        $mid=session('member.mid');
        if(Request::isAjax()){
            $phone=input('phone','');
            $type=input('type',0);
            $sms_code=input('sms_code');
            $nt=time();
            try{
                //验证是否发送了短信验证码,及验证码是否过期
                if(!session('?sms') || (session('sms.lasttime')+300)<$nt){
                    throw new Exception('短信验证码已过期');
                }
                //绑定时验证手机号
                if($type==1){
                    if($phone != session('sms.phone')){
                        throw new Exception('接收验证码的手机和提交的手机不一致');
                    }
                }
                //验证短信验证码
                if($sms_code != session('sms.code')){
                    throw new Exception('短信验证码错误');
                }
                $info=Member::find($mid);
                $info->phone=$phone;
                if(!$info->save()){
                    throw new Exception('操作用户过多，稍后重试');
                }
                session('sms',null);
                $this->err['code']=0;
                //模板消息推送
                $wx=new Wechat();
                /*
                 * 所需参数
                 *mid:3,[姓名：keyword1,手机号码：keyword2,时间：{{keyword3}}]
                 * */
                $name=!empty($info['realname'])?$info['realname']:$info['nickname'];
                $arr=[$name,$phone,date('Y年m月d日 H:i')];
                $wx->setTemplate(3,$arr);
                $wx->sendTemplate($info['openid']);

            }catch (Exception $e){
                $this->err['msg']=$e->getMessage();
            }
            return json($this->err);
        }else{
            $phone=Db::name('member')->where('id',$mid)->value('phone');
            if(empty($phone)){
                //设置
                return view('bind_mobile');
            }else{
                //重置
                return view('change_mobile');
            }

        }
    }

    //尊享会员
    public function member(){
        //会员等级
        $member_level=Db::name('level')->order('level_id')->select();
        $this->assign('member_level',$member_level);
        //会员规则
        $member_rule=$this->getSiteConfig('member_rule');
        //会员专属活动介绍
        $member_activity_introduce=$this->getSiteConfig('member_activity_introduce');
        $this->assign('member_rule',$member_rule);
        $this->assign('member_activity_introduce',$member_activity_introduce);

        //会员专属商品
        $map=[['status','=',1],['inventory','>',0],['vip_level','>',0]];

        $goods_list=GoodsShop::field('id,cover,goods_name,price,integral')
            ->where($map)
            ->paginate(4,true);
        $this->assign('goods_list',$goods_list);

        //个人信息
        $member=Member::with('level')->find(session('member.mid'));
        $this->assign('member',$member);


        return view('member');
    }

    //充值入口
    public function recharge(){
        $mid=session('member.mid');
        if(Request::isAjax()){

        }else{
            //余额
            $balance=Db::name('member')->where('id',$mid)->value('balance');
            $this->assign('balance',intval($balance/100));

            //充值卡
            $recharge_goods=RechargeGoods::where('is_delete',0)
                ->order('money')
                ->select();
            $this->assign('recharge_goods',$recharge_goods);


            return view('recharge');
        }
    }

    //充值记录
    public function rechargeLog(){
        if(Request::isAjax()){
            $size=input('size');
            $mid=session('member.mid');
            $map=[
                ['is_delete','=',0],
                ['status','>',-1],
                ['member_id','=',$mid],
                ['goods_type','=',2],//充值
            ];
            $data=Orders::with('recharge')
                ->field('id,order_no,pay_money,status,money,recharge_goods_id')
                ->where($map)
                ->where(function ($query){
                    $query->whereOr('audit','>',0)->whereOr('orders_type','=',0);
                })
                ->order('create_time desc')
                ->paginate($size,true);

            if($data->isEmpty()){
                $this->err['msg']='data is empty';
            }else{
                $this->err['code']=0;
                $this->err['data']=$data->items();
            }

            return json($this->err);
        }else{
            return view('recharge_log');
        }
    }

    //充值下单并支付
    public function rechargePay(){
        $recharge_goods_id=input('post.recharge_goods_id',0);

        $recharge_info=Db::name('recharge_goods')->find($recharge_goods_id);
        if(!$recharge_info){
            return view('public/err',['err_msg'=>'访问的内容不存在','type'=>1]);
        }
        $mid=session('member.mid');
        //订单信息
        $order_data=[
            'order_no'=>$this->createOrderNo(2),
            'member_id'=>$mid,
            'sale_money'=>$recharge_info['return_money'],
            'goods_type'=>2,    //充值
            'money'=>$recharge_info['money'],
            'pay_money'=>$recharge_info['money'],  //需支付金额
            'recharge_goods_id'=>$recharge_info['id']
        ];
        //插入订单
        $o=Orders::create($order_data);
        if(!$o){
            return view('public/err',['err_msg'=>'操作用户过多，稍后再试','type'=>1]);
        }
        $oid=$o->id;
        $Pay=new Pay();
        return $Pay->jsapi($oid);

    }

    //返现记录
    public function returnLog(){
        if(Request::isAjax()){
            $size=input('size');
            $mid=session('member.mid');
            $data=RechargeReturn::with('orders')
                ->where('member_id',$mid)
                ->order('create_time desc')
                ->paginate($size,true);

            if($data->isEmpty()){
                $this->err['msg']='data is empty';
            }else{
                $this->err['code']=0;
                $this->err['data']=$data->items();
            }

            return json($this->err);
        }else{
            return view('return_log');
        }
    }

    //签到
    public function signIn(){
        $mid=session('member.mid');
        $year=date('Y');
        $month=date('n');
        $day=date('j');
        if(Request::isAjax()){
            $sign_code=input('sign_code');
            $old_sign_code=session('sign_code');
            if($sign_code!=$old_sign_code){
                $this->err['des']=$old_sign_code;
                return json($this->err);
            }
            //签到处理
            $save=[
                'member_id'=>$mid,
                'year'=>$year,
                'month'=>$month,
                'day'=>$day
            ];
            if(!Db::name('member_sign_in')->where($save)->find()){
                $nt=time();
                //连续签到
                $yesterday=$this->getYesterday();
                $where=[
                    ['member_id','=',$mid],
                    ['year','=',$yesterday['year']],
                    ['month','=',$yesterday['month']],
                    ['day','=',$yesterday['day']],
                ];
                $sign_data=Db::name('member_sign_in')->where($where)->find();
                $continuous=1;
                if($sign_data){
                    $continuous=$sign_data['continuous']+1;
                }
                $save['continuous']=$continuous;

                //获取积分
                $integral=Db::name('sign_in_integral')
                    ->where('continuous','>=',$continuous)
                    ->order('level')
                    ->value('integral');
                $integral=$integral?$integral:1;
                $save['integral']=$integral;

                $save['create_time']=$nt;
                Db::name('member_sign_in')->insert($save);

                $m=Db::name('member')->find($mid);
                //添加积分记录
                $inte_data=[
                    'member_id'=>$mid,
                    'integral'=>$integral,
                    'des'=>'每日签到',
                    'old_integral'=>$m['integral'],
                    'surplus_integral'=>$m['integral']+$integral,
                    'create_time'=>$nt,
                ];
                Db::name('member_integral')->insert($inte_data);

                //增加积分
                Db::name('member')
                    ->where('id',$mid)
                    ->inc('integral',$integral)
                    ->update(['update_time'=>$nt]);

            }
            $this->err['code']=0;
            return json($this->err);
        }else{

            //获取本月签到
            $map=[
                ['member_id','=',$mid],
                ['year','=',$year],
                ['month','=',$month],
            ];
            $data=Db::name('member_sign_in')->where($map)->column('create_time');
            $this->assign('signDate',json_encode($data));

            //签到可获积分
            $tomorrow_inte=0;
            //连续签到
            $continuous=0;
                //今日签到
            $map[]=['day','=',$day];
            $sign_today=Db::name('member_sign_in')->where($map)->find();
            if(!$sign_today){
                $yesterday=$this->getYesterday();
                $where=[
                    ['member_id','=',$mid],
                    ['year','=',$yesterday['year']],
                    ['month','=',$yesterday['month']],
                    ['day','=',$yesterday['day']],
                ];
                $sign_yesterday=Db::name('member_sign_in')->where($where)->find();
                if($sign_yesterday){
                    $continuous=$sign_yesterday['continuous'];
                }
                //今天签到可获积分
                $today_inte=Db::name('sign_in_integral')
                    ->where('continuous','>=',$continuous+1)
                    ->order('level')
                    ->value('integral');
            }else{
                $continuous=$sign_today['continuous'];
                //明天签到可获积分
                $tomorrow_inte=Db::name('sign_in_integral')
                    ->where('continuous','>=',$continuous+1)
                    ->order('level')
                    ->value('integral');
                $today_inte=$sign_today['integral'];
            }

            $this->assign('continuous',$continuous);
            $this->assign('today_inte',$today_inte);
            $this->assign('tomorrow_inte',$tomorrow_inte);

            //签到验证码
            $sign_code=sha1(time());
            Session::flash('sign_code',$sign_code);
            $this->assign('sign_code',$sign_code);



            return view('sign_in');
        }
    }

    //获取签到日期
    public function getSignInDate(){
        if(Request::isAjax()){
            $mid=session('member.mid');
            $year=input('year');
            $month=input('month');
            $type=input('type');
            if($type==1){
                //上月
                $month=$month-1;
                if($month==0){
                    $month=12;
                    $year=$year-1;
                }
            }else{
                //下月
                $month=$month+1;
                if($month>12){
                    $month=1;
                    $year=$year+1;
                }
            }
            $map=[
                ['member_id','=',$mid],
                ['year','=',$year],
                ['month','=',$month],
            ];
            $data=Db::name('member_sign_in')->where($map)->column('create_time');
            $this->err=['code'=>0,'data'=>$data];


            return json($this->err);
        }
    }

    //编辑资料
    public function information(){
        $mid=session('member.mid');
        if(Request::isAjax()){
            $data=input('post.');
            $data=array_filter($data);
            if(isset($data['birthday'])){
                $times=strtotime($data['birthday']);
                $year=date('Y',$times);
                //计算年龄
                $data['age']=date('Y')-$year;
                //计算星座
                $data['constellation']=$this->getConstellation($times);
                    $data['birthday']=$times;
            }
            try{
                if(empty($data)){
                    throw new Exception('资料未做修改');
                }
                $m=Member::find($mid);
                $m->save($data);
                $this->err=[
                    'code'=>0,
                    'msg'=>'资料保存成功'
                ];
            }catch (Exception $e){
                $this->err['msg']=$e->getMessage();
            }

            return json($this->err);
        }else{

            $info=Member::field('password,safe,openid,unionid,integral,balance,recharge_money,return_money,consumption_money,earnings,staff_id',true)->find($mid);
            $this->assign('info',$info);
            //dump($info);
            $default_address=Db::name('member_address')
                ->where('member_id',session('member.mid'))
                ->order('default_addr desc,create_time desc')
                ->select();
            $this->assign('default_address',$default_address);

            return view('information');
        }
    }

    //刷新收货地址
    public function getAddress(){
        if(Request::isAjax()){
            $mid=session('member.mid');

            $address=Db::name('member_address')
                ->where('member_id',$mid)
                ->order('default_addr desc,update_time desc')
                ->select();
            if($address){
                $this->err['code']=0;
                $this->err['data']=$address;
            }else{
                $this->err['msg']='data is empty';
            }
            return json($this->err);
        }else{
            return view('public/404');
        }
    }
    //选择收货地址
    public function selectAddress(){
        if(Request::isAjax()){
            $id=input('id');

            $address=Db::name('member_address')
                ->find($id);
            if($address){
                $this->err['code']=0;
                $this->err['data']=$address;
            }else{
                $this->err['msg']='data is empty';
            }
            return json($this->err);
        }else{
            return view('public/404');
        }
    }

    //我的护理产品
    public function nursing(){
        if(Request::isAjax()){
            $size=input('size',2);
            $map=[
                ['member_id','=',session('member.mid')]
            ];
            $data=MemberNursing::with(['goods','orders'])
                ->where($map)
                ->order('create_time desc')
                ->paginate($size,true);
            if($data->isEmpty()){
                $this->err['msg']='data is empty';
            }else{
                $this->err['code']=0;
                $this->err['data']=$data->items();
            }
            return json($this->err);
        }else{

            return view('my_nursing');
        }
    }


    /*
     *签收成功统一处理
     *
     * $order_info->订单信息
     * $goods_list->订单商品信息
     * $distribution->分销信息
     * $nt->当前时间戳
     * */
    private function ordersDispose($oid){
        $order_info=Db::name('orders')->find($oid);
        $goods_list=Db::name('orders_goods')
            ->where('orders_id',$oid)
            ->select();
        $nt=time();
        $res=['code'=>-1,'msg'=>'success'];
        //发起事务
        Db::startTrans();
        try{
            $msg_data=[];
            //可获得总积分
            $integral=0;
            //库存与活动处理
            foreach ($goods_list as $v){
                //积分累加
                $integral+=$v['get_integral'];
                //活动处理
                if($v['activity_id']){
                    $activity_info=Db::name('activity')->find($v['activity_id']);
                    if($activity_info && $activity_info['activity_type'] > 2){
                        if($activity_info['activity_type']==3){
                            //赠送积分
                            $integral+=$activity_info['sale'];
                        }elseif($activity_info['activity_type']==4){
                            //赠送优惠券
                            $cinfo=Db::name('coupon')
                                ->field('id,coupon_name,validity_time,amount')
                                ->find($activity_info['sale']);
                            if($cinfo['amount']!=0){
                                $validity=$cinfo['validity_time']?($cinfo['validity_time']*24*3600+$nt):0;
                                $data=[
                                    'member_id'=>$order_info['member_id'],
                                    'coupon_id'=>$cinfo['id'],
                                    'validity'=>$validity,
                                    'create_time'=>$nt
                                ];
                                if(!Db::name('coupon_get')->insert($data)){
                                    throw new Exception('商品活动未处理');
                                }
                                //发送消息
                                $msg_data[]=[
                                    'msg_classify'=>4,
                                    'member_id'=>$order_info['member_id'],
                                    'content'=>'您购买活动商品赠送的优惠券【'.$cinfo['coupon_name'].'】已经发送，请您注意查收',
                                    'create_time'=>$nt
                                ];
                            }else{
                                $msg_data[]=[
                                    'msg_classify'=>4,
                                    'member_id'=>$order_info['member_id'],
                                    'content'=>'您购买活动商品赠送的优惠券【'.$cinfo['coupon_name'].'】已经领完了！期待下次活动哦……',
                                    'create_time'=>$nt
                                ];
                            }
                        }
                    }
                }
            }

            //购物积分
            if($integral > 0){
                //添加积分记录
                $old_integral=Db::name('member')
                    ->where('id',$order_info['member_id'])
                    ->value('integral');

                $integral_log=[
                    'member_id'=>$order_info['member_id'],
                    'integral'=>$integral,
                    'type'=>1,
                    'des'=>'购物赠送',
                    'old_integral'=>$old_integral,
                    'surplus_integral'=>$old_integral+$integral,
                    'create_time'=>$nt
                ];
                if(!Db::name('member_integral')->insert($integral_log)){
                    throw new Exception('添加积分记录失败');
                }
            }

            //增加积分与消费总额
            if(!$order_info['is_int']){
                $re_up=Db::name('member')
                    ->where('id',$order_info['member_id'])
                    ->inc('consumption_money',$order_info['pay_money']-$order_info['express_fee'])
                    ->inc('integral',$integral)
                    ->update();
                if(!$re_up){
                    throw new Exception('会员充值处理失败');
                }
            }


            //发送用户消息
            if(!empty($msg_data)){
                if(!Db::name('message')->insertAll($msg_data)){
                    throw new Exception('系统消息发送失败');
                }
            }

            //修改订单状态
            if(!Db::name('orders')->where('id',$oid)->update(['status'=>99,'pay_time'=>$nt])){
                throw new Exception('修改订单状态失败');
            }
            if(!Db::name('orders_goods')->where('orders_id',$oid)->setField('status',99)){
                throw new Exception('修改商品状态失败');
            }
            //提交事务
            Db::commit();
            $res['code']=0;
        }catch (Exception $ex){
            //事务回退
            Db::rollback();
            $res['msg']=$ex->getMessage();
        }

        return $res;
    }


    /*发送短信验证码
     * type：1，绑定手机；2，解绑手机；3，设置交易密码；
     *
     * */
    public function sendSMS(){
        if(Request::isAjax()){
            $mid=session('member.mid');
            $type=input('type',1);
            $nt=time();
            try{
                if($type==1){
                    //验证号码
                    $phone=input('phone',0);
                    if(!$phone || !Validate::isMobile($phone)){
                        throw new Exception('请输入有效的手机号码！');
                    }
                    //验证手机是否注册
                    $uid=Db::name('member')->where('phone',$phone)->value('id');
                    if($uid){
                        throw new Exception('手机号码已被绑定！');
                    }
                }else{
                    $phone=Db::name('member')->where('id',$mid)->value('phone');
                    if(!$phone){
                        throw new Exception('未绑定手机号码！');
                    }
                }
                //判断短信发送间隔是否120秒
                if(!session('?sms') || (session('sms.lasttime')+120)<$nt || session('sms.phone')!=$phone ){
                    $code=mt_rand(100000, 999999);
                    session('sms',['lasttime'=>$nt,'code'=>$code,'phone'=>$phone]);
                    switch ($type){
                        case 1:
                            $before_str='您正在绑定手机号';
                            break;
                        case 2:
                            $before_str='您正在重置手机号';
                            break;
                        case 3:
                            $before_str='您正在设置交易密码';
                            break;
                        default:
                            $before_str='您正在安全操作';
                    }
                    $message=$before_str.'，验证码为: ' . $code . '，5分钟内有效';
                    $res=$this->sendEx($phone,$message);
                    $res=json_decode($res,true);
                    if($res['code']!=0){
                        throw new Exception($res['msg']);
                    }
                    //保存短信记录
                    $sms_data=[
                        'member_id'=>$mid,
                        'mobile'=>$phone,
                        'content'=>$message,
                    ];
                    SmsLogs::create($sms_data);
                    $this->err=[
                        'code'=>0,
                        'msg'=>'短信验证码发送成功，请注意查收！'
                    ];
                }else{
                    $t=120-($nt-session('sms.lasttime'));
                    $this->err=[
                        'code'=>-9,
                        'st'=>$t
                    ];
                    throw new Exception('请'.$t.' 秒后重新发送验证码！');
                }
            }catch (Exception $e){
                $this->err['msg']=$e->getMessage();
            }


            return json($this->err);
        }
    }

    //验证交易密码
    public function checkPassword(){
        if(Request::isAjax()){
            $password=input('password');
            $this->err=$this->checkPasswordAction($password);
            return json($this->err);
        }
    }


    //获取昨天
    protected function getYesterday(){
        $date_arr=explode('-',date('Y-n-j'));
        $day=$date_arr[2]-1;
        $year=$date_arr[0];
        $month=$date_arr[1];
        if($day==0){
            $month=$month-1;
            if($month==0){
                $month=12;
                $year=$year-1;
            }
            $day=date('j',strtotime($year.'-'.$month));
        }
        return ['year'=>$year,'month'=>$month,'day'=>$day];
    }

    //计算星座
    protected function getConstellation($time)
    {
        $y   = date("Y",$time).'-';
        $userTime = $time;

        $januaryS   = strtotime($y.'01-20 00:00:00');
        $januaryE   = strtotime($y.'02-18 23:59:59');
        $februaryS  = strtotime($y.'02-19 00:00:00');
        $februaryE  = strtotime($y.'03-20 23:59:59');
        $marchS     = strtotime($y.'03-21 00:00:00');
        $marchE     = strtotime($y.'04-19 23:59:59');
        $aprilS     = strtotime($y.'04-20 00:00:00');
        $aprilE     = strtotime($y.'05-20 23:59:59');
        $mayS       = strtotime($y.'05-21 00:00:00');
        $mayE       = strtotime($y.'06-21 23:59:59');
        $juneS      = strtotime($y.'06-22 00:00:00');
        $juneE      = strtotime($y.'07-22 23:59:59');
        $julyS      = strtotime($y.'07-23 00:00:00');
        $julyE      = strtotime($y.'08-22 23:59:59');
        $augustS    = strtotime($y.'08-23 00:00:00');
        $augustE    = strtotime($y.'09-22 23:59:59');
        $septemberS = strtotime($y.'09-23 00:00:00');
        $septemberE = strtotime($y.'10-23 23:59:59');
        $octoberS   = strtotime($y.'10-24 00:00:00');
        $octoberE   = strtotime($y.'11-22 23:59:59');
        $novemberS  = strtotime($y.'11-23 00:00:00');
        $novemberE  = strtotime($y.'12-21 23:59:59');

        if($userTime >= $januaryS && $userTime <= $januaryE){
            $constellation = '水瓶座';
        }elseif($userTime >= $februaryS && $userTime <= $februaryE){
            $constellation = '双鱼座';
        }elseif($userTime >= $marchS && $userTime <= $marchE){
            $constellation = '白羊座';
        }elseif($userTime >= $aprilS && $userTime <= $aprilE){
            $constellation = '金牛座';
        }elseif($userTime >= $mayS && $userTime <= $mayE){
            $constellation = '双子座';
        }elseif($userTime >= $juneS && $userTime <= $juneE){
            $constellation = '巨蟹座';
        }elseif($userTime >= $julyS && $userTime <= $julyE){
            $constellation = '狮子座';
        }elseif($userTime >= $augustS && $userTime <= $augustE){
            $constellation = '处女座';
        }elseif($userTime >= $septemberS && $userTime <= $septemberE){
            $constellation = '天秤座';
        }elseif($userTime >= $octoberS && $userTime <= $octoberE){
            $constellation = '天蝎座';
        }elseif($userTime >= $novemberS && $userTime <= $novemberE){
            $constellation = '射手座';
        }else{
            $constellation = '摩羯座';
        }

        return $constellation;
    }

    protected function sendEx($mobile,$content){
        $flag = 0;
        $params='';//要post的数据

            //以下信息自己填以下
        $argv = array(
        'accesskey'=>'jR8erU7ObvX8crbY',     //必填参数
        'secret'=>'PvRu0in4V1CbE0rfVtfI8DyVeJQT1PSw',     //必填参数。
        'content'=>$content,   //必填参数
        'mobile'=>$mobile,   //必填参数。手机号码
        'templateId'=>'176731',   //模板编号
        'sign'=>'【好样软件】'   //必填参数。用户签名。
        );
        foreach ($argv as $key=>$value) {
        if ($flag!=0) {
        $params .= "&";
        $flag = 1;
        }
        $params.= $key."="; $params.= urlencode($value);// urlencode($value);
        $flag = 1;
        }
        $url = "http://api.1cloudsp.com/api/v2/single_send?".$params; //提交的url地址
        $con= file_get_contents($url);  //获取信息发送后的状态
        return $con;

    }

    public function _empty()
    {
        //把所有城市的操作解析到city方法
        return view('public/404');
    }

}
