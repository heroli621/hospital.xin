<?php
/*
 * 商品 控制器
 * */
namespace app\shop\controller;


use app\model\Activity;
use app\model\ActivityShop;
use app\model\Coupon;
use app\model\CouponGet;
use app\model\GoodsEvaluate;
use app\model\GoodsShop;
use app\model\GoodsSpec;
use app\model\MemberSearch;
use think\Controller;
use think\Db;
use think\facade\Request;


class Commodity extends Controller
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->assign('nav_alias','classify');
        //获取商城配置
        if(!session('?config')){
            $config=Db::name('config')->where('type',2)->column('value','varname');
            session('config',$config);
        }
        $this->assign('config',session('config'));
    }

    //分类列表
    public function index()
    {
        //获取商品分类
        $goods_classify=Db::name('goods_classify')
            ->order('sort desc,create_time asc')
            ->select();
        $this->assign('goods_classify',$goods_classify);
        $map=[
            ['is_int','=',0],
            ['is_new','=',0],
            ['status','=',1],
            ['is_delete','=',0]
        ];
        $cid=input('cid',$goods_classify[0]['id']);
        $map[]=['goods_classify_id','=',$cid];
        $this->assign('cid',$cid);

        //获取活动
        $activity=Activity::field('id,goods_id,cover')
            ->where('status',1)
            ->where('isdelete',0)
            ->where('stop_time','>',time())
            ->order('top desc,sort desc,create_time desc')
            ->limit(5)
            ->select();
        $this->assign('activity',$activity);


        return view('list');
    }

    //ajax获取商品列表
    public function getList()
    {
        //获取商品
        $map=[
            ['is_int','=',0],
            ['is_new','=',0],
            ['vip_level','=',0],
            ['status','=',1],
            ['inventory','>',0],
            ['is_delete','=',0]
        ];
        $size=input('size');
        $cid=input('type',0);
        $map[]=['goods_classify_id','=',$cid];
        //商品
        $goods_list=GoodsShop::field('id,cover,goods_name')
            ->where($map)
            ->paginate($size,true);
        if(!$goods_list->isEmpty()){
            $res=['code'=>0,'data'=>$goods_list->items()];
        }else{
            $res=['code'=>400,'msg'=>'暂无数据'];
        }


        return json($res);
    }

    //专区列表
    public function mold(){
        $mold=input('type',1);
        $mold=$mold>3 || $mold<1?1:$mold;
        $this->assign('mold',$mold);
        switch ($mold){
            case 1:         //新人专享
                $min_title='新人专享';
                break;
            case 2:         //会员专享
                $min_title='会员专享';
                break;
            case 3:         //活动专区
                $min_title='活动专区';
                break;
        }
        $this->assign('min_title',$min_title);
        $nt=time();
        //获取活动
        $activity=Activity::field('id,goods_id,cover')
            ->where('status',1)
            ->where('isdelete',0)
            ->where('stop_time','>',$nt)
            ->order('top desc,sort desc,create_time desc')
            ->limit(5)
            ->select();
        $this->assign('activity',$activity);

        return view('mold');
    }

    //获取专区商品
    public function getMold(){
        $map=[['status','=',1],['inventory','>',0]];
        $mold=input('type',1);
        $mold=$mold>3 || $mold<1?1:$mold;
        $size=input('size');
        $is_activity=false;
        switch ($mold){
            case 1:         //新人专享
                $map[]=['is_new','=',1];
                break;
            case 2:         //会员专享
                $map[]=['vip_level','<>',0];
                $map[]=['is_int','=',0];
                break;
            case 3:         //活动专区
                $is_activity=true;
                break;
        }
        $nt=time();
        if($is_activity){
            $goods_list=ActivityShop::with(['goods'=>function($query){
                $query->field('id,goods_name,cover,price')->where('is_delete','=',0);
            }])
                ->where('status',1)
                ->where('isdelete',0)
                ->where('stop_time','>',$nt)
                ->paginate($size,true)->each(function (&$item){
                    if($item['activity_type']==1 || $item['activity_type']==2){
                        $item['goods']['sale_price']=$item['activity_type']==1?$item['goods']['price']-$item['sale']:$item['goods']['price']*$item['sale']/100;
                    }
                    $new_vlaue=$item['goods'];
                    $item=[
                        'id'=>$new_vlaue['id'],
                        'cover'=>$new_vlaue['cover'],
                        'goods_name'=>$item['goods']['goods_name'],
                        'price'=>$new_vlaue['price'],
                        'sale_price'=>isset($new_vlaue['sale_price'])?$new_vlaue['sale_price']:0
                    ];
                    return $item;
                });
        }else{

            $goods_list=GoodsShop::field('id,cover,goods_name,price,integral')
                ->where($map)
                ->paginate($size,true)->each(function($item){
                    $item['sale_price']=$item['price'];
                    return $item;
                });
        }
        if(!$goods_list->isEmpty()){
            $res=['code'=>0,'data'=>$goods_list->items()];
        }else{
            $res=['code'=>400,'msg'=>'暂无数据'];
        }
        //dump($res);
        return json($res);
    }

    //积分商城
    public function integral(){
        //我的积分
        $integral=Db::name('member')->where('id',session('member.mid'))->value('integral');
        $this->assign('integral',$integral);
        return view('integral');
    }


    //获取积分商品
    public function getIntegral(){
        $map=[['status','=',1],['inventory','>',0],['is_int','=',1],['is_delete','=',0]];
        $size=input('size');

        $goods_list=GoodsShop::field('id,cover,goods_name,integral')
            ->where($map)
            ->paginate($size,true)->toArray();
        if($goods_list){
            $res=['code'=>0,'data'=>$goods_list['data']];
        }else{
            $res=['code'=>400,'msg'=>'暂无数据'];
        }
        //dump($res);
        return json($res);
    }

    //详情
    public function detail(){
        $back_url=input('back_url','/');
        $this->assign('back_url',$back_url);

        $id=input('id',0);

        if(!$id)return redirect('/');

        $nt=time();
        //商品详情
        $info=GoodsShop::with(['content','activity','level'])
            ->find($id)->toArray();
        //剩余库存
        $info['inventory']=$this->residualInventory($info['id']);

        //dump($info);exit;
        $this->assign('info',$info);

        $mid=session('member.mid');



        //vip价格
        if($info['is_new'] || $info['vip_level']){
            $sale_price=$info['price'];
        }else{
            $vip_sale=$this->getMemberLevelSale($mid);
            $sale_price=round($info['price']*$vip_sale/100,2);
            if($info['activity']){
                switch ($info['activity']['activity_type']){
                    case 1:
                        $sale_price=$info['price']-$info['activity']['sale'];
                        break;
                    case 2:
                        $sale_price=round($info['price']*$info['activity']['sale']/100,2);
                        break;
                    default:
                        $sale_price=$info['price'];
                }
            }
        }
        $this->assign('sale_price',$sale_price);

        //销量
        $sale_num=Db::name('orders_goods')
            ->where('goods_id',$id)
            ->sum('buy_num');
        $this->assign('sale_num',$sale_num);

        //优惠券
        $coupons=Coupon::withCount(['memberGet'=>function($query){
            $query->where('member_id',session('member.mid'))
                ->where('status',1)->where('validity',['=',0],['>',time()],'or');
        }])
            ->with('level')
            ->where('start_time',['<',$nt],['=',0],'or')
            ->where('stop_time',['>',$nt],['=',0],'or')
            ->where('isdelete','<>',1)
            ->order('create_time desc')
            ->select();
        $this->assign('coupons',$coupons);
        //dump($coupons);exit;

        //商品规格
        $goods_spec=GoodsSpec::where('goods_id',$id)->select()->each(function ($item){
            //处理商品规格剩余库存
            $item['inventory']=$this->residualInventory($item['id'],2);
            return $item;
        });

        $this->assign('goods_spec',$goods_spec);

        //评价
        $evaluate=GoodsEvaluate::with('member')
            ->where('goods_id',$id)
            ->order('create_time desc')
            ->limit(3)
            ->select();
        $this->assign('evaluate',$evaluate);

        //评分
        $grade=Db::name('goods_evaluate')->where('goods_id',$id)->avg('grade');
        $grade=$grade?$grade:5;
        $this->assign('grade',number_format($grade,1));

        //评价总数
        $evaluate_num=Db::name('goods_evaluate')
            ->where('goods_id',$id)->count();
        $this->assign('evaluate_num',$evaluate_num);

        //会员等级
        $member_level=Db::name('member')->where('id',$mid)->value('level_id');
        $this->assign('member_level',$member_level);

        //已购商品数量
        $buy_goods_num=Db::name('orders_goods')
            ->where('goods_id',$id)
            ->where('member_id',$mid)
            ->where('status','>',0)
            ->sum('buy_num');
        //dump($buy_goods_num);exit;
        $this->assign('buy_goods_num',$buy_goods_num);

        return view('show');
    }

    //商品搜索
    public function search(){

        //搜索历史记录
        $data=Db::name('member_search')
            ->where('member_id',session('member.mid'))
            ->order('create_time desc')
            ->column('keywords');
        $this->assign('data',$data);

        //热门搜索
        $hot_keywords=Db::name('member_search')
            ->order('create_time desc')
            ->limit(8)
            ->column('keywords');
        $this->assign('hot_keywords',$hot_keywords);

        return view('search');
    }

    //删除搜索历史记录
    public function searchDel(){
        $res=Db::name('member_search')
            ->where('member_id',session('member.mid'))
            ->delete();
        return json(['code'=>$res?0:211]);
    }

    //搜索
    public function searchKeyword(){
        //获取商品
        $map=[
            ['is_int','=',0],
            ['is_new','=',0],
            ['status','=',1],
            ['inventory','>',0],
            ['is_delete','=',0]
        ];
        $keyword=input('keyword','');
        $map[]=['goods_name','like',"%$keyword%"];
        //商品
        $goods_list=GoodsShop::field('id,cover,goods_name,price')
            ->where($map)
            ->limit(20)
            ->select();
        if($goods_list){
            $res=['code'=>0,'list'=>$goods_list];
        }else{
            $res=['code'=>400,'msg'=>'暂无数据'];
        }

        //添加搜索历史记录
        $model=new MemberSearch();
        $model->insertNew(session('member.mid'),$keyword);

        return json($res);
    }

    //评价页
    public function evaluate(){
        $gid=input('goods_id');
        $this->assign('gid',$gid);
        //好评
        $good=Db::name('goods_evaluate')
            ->where('goods_id',$gid)
            ->where('grade','>',3)
            ->count();
        //中评
        $mid=Db::name('goods_evaluate')
            ->where('goods_id',$gid)
            ->where('grade',['=',2],['=',3],'or')
            ->count();

        //差评
        $low=Db::name('goods_evaluate')
            ->where('goods_id',$gid)
            ->where('grade','=',1)
            ->count();
        //总评价
        $total=$good+$mid+$low;
        //好评率
        $good_ratio=$good?round($good/$total*100,1):0;
        //中评率
        $mid_ratio=$mid?round($mid/$total*100,1):0;
        //差评率
        $low_ratio=$low?round($low/$total*100,1):0;

        $this->assign('ratio',['good_ratio'=>$good_ratio,'mid_ratio'=>$mid_ratio,'low_ratio'=>$low_ratio]);


        return view('evaluate');

    }

    //获取更多评价
    public function getEvaluate(){
        $gid=input('goods_id');
        $size=input('size');
        //评价
        $data=GoodsEvaluate::with('member')
            ->where('goods_id',$gid)
            ->order('create_time desc')
            ->paginate($size,true)->each(function($item){
                if($item['anonymity']){
                    $item['nickname']= mb_substr($item['nickname'],0,1,'utf-8').'***';
                }
                return $item;
            });
        return json(['code'=>0,'data'=>$data->items()]);
    }


    //会员领取优惠券
    public function getCoupon(){
        if(Request::isAjax()){
            $cid=input('id');
            $cinfo=Db::name('coupon')->find($cid);
            if(!$cinfo){
                return json(['code'=>1,'msg'=>'优惠券参数错误']);
            }
            $mid=session('member.mid');
            //判断领取限制
            if($cinfo['get_amount']){
                $get_num=Db::name('coupon_get')
                    ->where('member_id',$mid)
                    ->where('coupon_id',$cinfo['id'])
                    ->count();
                if($get_num>=$cinfo['get_amount']){
                    return json(['code'=>2,'msg'=>'超出优惠券领取数量']);
                }
            }
            //判断会员等级限制
            if($cinfo['member_level']){
                $member_level=Db::name('member')
                    ->where('id',$mid)
                    ->value('level_id');
                if($member_level<$cinfo['member_level']){
                    return json(['code'=>3,'msg'=>'该优惠券属于 '.Db::name('level')->where('level_id',$cinfo['member_level'])->value('level_name').' 专享']);
                }
            }
            $nt=time();
            $validity=$cinfo['validity_time']?($cinfo['validity_time']*24*3600+$nt):0;
            $data=[
                'member_id'=>$mid,
                'coupon_id'=>$cinfo['id'],
                'validity'=>$validity,
                'des'=>'会员领取'
            ];
            $re=CouponGet::create($data);
            if($re){
                //优惠券数量-1
                Db::name('coupon')->where('id',$cid)->setDec('amount');
                $res=['code'=>0];
            }else{
                $res=['code'=>4,'msg'=>'网络连接失败，稍后再试'];
            }
            return json($res);
        }else{
            return view('public/404');
        }
    }


    public function _empty()
    {
        //把所有城市的操作解析到city方法
        return view('public/404');
    }

}
