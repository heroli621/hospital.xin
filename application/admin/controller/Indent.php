<?php
/*
 * 订单管理
 * */
namespace app\admin\controller;


use app\admin\model\Orders;
use app\admin\model\OrdersErr;
use app\admin\model\OrdersShow;
use think\Db;
use think\facade\Request;


class Indent extends BaseUser
{
    //中间件
    protected $middleware = [
        'app\admin\middleware\Auth' => [
            //无须权限验证
            'except' => ['guide','_empty']
        ],
    ];
    protected $nav_expense='admin/shop/expense';    //消费订单
    protected $nav_recharge='admin/shop/recharge';  //充值订单
    protected $nav_abnormal='admin/shop/abnormal';  //异常订单
    protected $pid=15;
    protected $left_menus=[];
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->assign('nav_path',Db::name('menus')->where('id',$this->pid)->value('link'));
        $left_menus=$this->getNav($this->pid);
        $this->left_menus=$left_menus;
        $this->assign("left_menus",$left_menus);

    }

    public function guide(){
        if(count($this->left_menus)){
            $menu=array_shift($this->left_menus);
            return redirect($menu['link']);
        }else{
            return view('public/guide');
        }

    }
    /**********************订单管理***********************/

    //消费订单
    public function expense()
    {
        if(Request::isAjax()){
            $map=[];
            $listRow=input('limit');
            $where=input('where',[]);
            if(!empty($where)){
                //订单号筛选
                if(!empty($where['ono'])){
                    $map[]=['out_trade_no','like',"%{$where['ono']}%"];
                }
                //会员筛选
                if(!empty($where['member'])){
                    $res=Db::name('member')->whereLike('nickname|phone|realname',"%{$where['member']}%")->column('member_id');
                    $map[]=$res?['member_id','in',$res]:['member_id','=',-1];
                }
                //日期筛选
                if(!empty($where['start_stop'])){
                    $ss=explode(" _ ",$where['start_stop']);
                    $map[]=['create_time','between time',$ss];
                }
                //状态筛选
                if($where['o_status']>-1){
                    $map[]=['status','=',$where['o_status']];
                }
            }

            //获取数据
            $data=Orders::with(['m','u','g'])
                ->where($map)
                ->order('create_time desc')
                ->paginate($listRow);

            return json(['code'=>0,'msg'=>'','count'=>$data->total(),'data'=>$data->items()]);
        }else{
            $this->assign('nav_title',$this->nav_expense);
            return view('index');
        }

    }

    //充值订单
    public function recharge()
    {
        if(Request::isAjax()){
            $map=[['order_type','=',2]];
            $listRow=input('limit');
            $where=input('where',[]);
            if(!empty($where)){
                //订单号筛选
                if(!empty($where['ono'])){
                    $map[]=['order_no','=',$where['ono']];
                }
                //会员筛选
                if(!empty($where['member'])){
                    $res=Db::name('member')->whereLike('nickname|phone|realname',"%{$where['member']}%")->column('id');
                    $map[]=$res?['member_id','in',$res]:['member_id','=',-1];
                }
                //日期筛选
                if(!empty($where['start_stop'])){
                    $ss=explode(" _ ",$where['start_stop']);
                    $map[]=['create_time','between time',$ss];
                }
                //状态筛选
                if($where['o_status']>-2){
                    $map[]=['status','=',$where['o_status']];
                }
            }

            //获取数据
            $data=OrdersShow::with(['member','recharge'])
                ->where($map)
                ->order('create_time desc')
                ->paginate($listRow);

            return json(['code'=>0,'msg'=>'','count'=>$data->total(),'data'=>$data->items()]);
        }else{
            $this->assign('nav_title',$this->nav_recharge);
            return view('recharge');
        }

    }

    //异常订单
    public function abnormal(){
        if(Request::isAjax()){
            $map=[];
            $listRow=input('limit');
            $where=input('where',[]);
            if(!empty($where)){
                //日期筛选
                if(!empty($where['start_stop'])){
                    $ss=explode(" _ ",$where['start_stop']);
                    $map[]=['create_time','between time',$ss];
                }
                //学员筛选
                if(!empty($where['member'])){
                    $res=Db::name('member')->whereLike('nickname|phone|realname',"%{$where['member']}%")->column('id');
                    $map[]=$res?['member_id','in',$res]:['member_id','=',-1];
                }
            }
            //获取数据
            $data=OrdersErr::with('member')
                ->where($map)
                ->order('create_time desc')
                ->paginate($listRow);
            //$data=$data->toArray();
            //dump($data['data'][0]);exit;
            $res=['code'=>0,'msg'=>'','count'=>$data->total(),'data'=>$data->items()];
            return json($res);
        }else{
            $this->assign('nav_title',$this->nav_abnormal);
            return view('abnormal');
        }
    }

    //清除过期订单
    public function del(){
        if(Request::isAjax()){
            $this->err['code']=0;
            $oids=Db::name('orders')->where('status',-1)->column('id');
            if($oids){
                $rows=Db::name('orders')->delete($oids);
                if($rows){
                    Db::name('orders_goods')->whereIn('orders_id',$oids)->delete();
                }
            }

        }
        return json($this->err);
    }


    /**************************公共*************************/

    public function _empty()
    {

        return view('public/404');
    }

}
