<?php
/*
 * 订单管理
 * */
namespace app\admin\controller;


use app\admin\model\ClassMember;
use app\admin\model\JournalCapital;
use app\admin\model\MemberRoleApply;
use app\admin\model\Popularize;
use app\admin\model\Withdraw;
use app\admin\validate\ServersValidate;
use app\admin\validate\SignInIntegralValidate;
use app\admin\model\BrokerageLogs;
use app\admin\model\EarningsLogs;
use app\admin\model\Goods;
use app\admin\model\Level;
use app\admin\model\Member;
use app\admin\model\MemberHealthAdmin;
use app\admin\model\MemberIntegral;
use app\admin\model\MemberNursing;
use app\admin\model\MemberSubscribe;
use app\admin\model\MemberSubscribeGoods;
use app\admin\model\MemberWithdraw;
use app\admin\model\RechargeGoods;
use app\admin\model\RechargeMoney;
use app\admin\model\RechargeReturn;
use app\admin\model\RedeemCode;
use app\admin\model\Servers;
use app\admin\model\SignInIntegral;
use app\admin\model\Staff;
use app\admin\model\TermModel;
use think\Db;
use think\Exception;
use think\facade\Request;
use think\facade\Validate;



class Vip extends BaseUser
{
    //中间件
    protected $middleware = [
        'app\admin\middleware\Auth' => [
            //无须权限验证
            'except' => ['guide','_empty','uploadPic','uploadFile','changeField','noregist']
        ],
    ];

    protected $pid=4;
    protected $left_menus=[];
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->assign('nav_path',Db::name('menus')->where('id',$this->pid)->value('link'));
        $left_menus=$this->getNav($this->pid);
        $this->left_menus=$left_menus;
        $this->assign("left_menus",$left_menus);

    }

    public function guide(){
        if(count($this->left_menus)){
            $menu=array_shift($this->left_menus);
            return redirect($menu['link']);
        }else{
            return view('public/guide');
        }

    }

    /**********************会员管理***********************/

    //列表
    public function member()
    {
        if(Request::isAjax()){
            $map=[];
            $listRow=input('limit');
            $title=input('member','');
            if($title){
                $map[]=['nickname|mobile','like',"%$title%"];
            }

            //获取数据
            $data=Member::where($map)
                ->order('create_time desc')
                ->paginate($listRow);

            return json(['code'=>0,'msg'=>'','count'=>$data->total(),'data'=>$data->items()]);
        }else{

            $this->assign('nav_title','admin/vip/member');
            return view('index');
        }

    }

    //冻结与解冻
    public function unAndFreeze(){
        $id=input('id');

        $info=Member::get($id);
        if(!$info){
            $this->err['msg']='未知参数';
            return json($this->err);
        }
        $new_val=$info['status']==1?0:1;
        $info['status']=$new_val;
        if($info->save()){
            $this->err['code']=0;
            $this->err['data']=$new_val;
            //添加日志
            $this->addLog(3,($new_val?'解冻':'冻结').'会员【'.$info['nickname'].'】');
        }else{
            $this->err['msg']='网络延迟，稍后再试';
        }

        return json($this->err);
    }

    //鉴定师设置
    public function valuator(){
        $id=input('id');

        $info=Member::get($id);
        if(!$info){
            $this->err['msg']='未知参数';
            return json($this->err);
        }
        $new_val=$info['valuator']==1?0:1;
        $info['valuator']=$new_val;
        if($info->save()){
            $this->err['code']=0;
            $this->err['data']=$new_val;
            //添加日志
            $this->addLog(3,'会员【'.$info['nickname'].'】'.($new_val?'设为鉴定师':'取消鉴定资格'));
        }else{
            $this->err['msg']='网络延迟，稍后再试';
        }

        return json($this->err);
    }


    /***************************角色申请*********************/
    //申请列表
    public function role(){
        if(Request::isAjax()){

            $map=[];
            $listRow=input('limit');
            $title=input('member','');
            if($title){
                $mid=Db::name('member')->whereLike('nickname|mobile',"%$title%")->column("member_id");
                $map[]=count($mid)?['member_id','in',$mid]:['member_id','=',-1];
            }
            //获取数据
            $data=MemberRoleApply::with('member')
                ->where($map)
                ->order('create_time desc')
                ->paginate($listRow);

            return json(['code'=>0,'msg'=>'','count'=>$data->total(),'data'=>$data->items()]);
        }else{

            $this->assign('nav_title','admin/vip/role');
            return view('role');
        }
    }

    //角色审核
    public function roleAudit(){
        if(Request::isAjax()){
            $status=input('status',2);
            $id=input('id',0);
            $des=input('des','');
            $nt=time();
            //开启事务
            Db::startTrans();
            try{
                //验证id
                $info=Db::name('member_role_apply')->find();
                if(!$info){
                    throw  new Exception('参数错误');
                }
                //审核
                $save=[
                    'id'=>$id,
                    'status'=>$status,
                    'remark'=>$des,
                    'update_time'=>$nt
                ];
                $row=Db::name('member_role_apply')->update($save);
                if(!$row){
                    throw  new Exception('审核申请失败');
                }
                //更改用户角色
                $member = Member::get($info['member_id']);
                if(!$member){
                    throw  new Exception('无效申请！');
                }
                $member->role = $info['role'];
                $member->save();
                $this->err['code']=0;

                //提交事务
                Db::commit();
                //添加日志
                $this->addLog(3,($status == 2?"通过":"拒绝")."【{$member['nickname']}】角色申请审核");
            }catch (Exception $e){
                //回退事务
                Db::rollback();
                $this->err['msg']=$e->getMessage();
            }
            return json($this->err);
        }
    }
    /**************************提现审核************************/
    //列表
    public function withdraw(){
        if(Request::isAjax()){
            $map=[];
            $listRow=input('limit');
            $where=input('where',[]);
            if(!empty($where)){
                //学员筛选
                if(!empty($where['member'])){
                    $res=Db::name('member')->whereLike('nickname|phone|realname',"%{$where['member']}%")->column('member_id');
                    $map[]=$res?['member_id','in',$res]:['member_id','=',-1];
                }
                //日期筛选
                if(!empty($where['start_stop'])){
                    $ss=explode(" _ ",$where['start_stop']);
                    $map[]=['create_time','between time',$ss];
                }
            }
            //获取数据
            $data=Withdraw::with('member')
                ->where($map)
                ->order('create_time desc')
                ->paginate($listRow);

            return json(['code'=>0,'msg'=>'','count'=>$data->total(),'data'=>$data->items()]);
        }else{

            $this->assign('nav_title','admin/vip/withdraw');
            return view('withdraw');
        }
    }

    //提现审核
    public function audit(){
        if(Request::isAjax()){
            $type=input('type',1);
            $ids=input('ids');
            $des=input('des','');
            $nt=time();
            //开启事务
            Db::startTrans();
            try{
                //重载IDS
                $ids=Db::name('withdraw')
                    ->whereIn('withdraw_id',$ids)
                    ->where('status',0)
                    ->column('withdraw_id');
                if(!$ids){
                    throw  new Exception('请选择待审核的申请');
                }
                //审核
                $save=[
                    'status'=>$type,
                    'des'=>$des,
                    'audit_time'=>$nt
                ];
                $row=Db::name('withdraw')
                    ->whereIn('withdraw_id',$ids)
                    ->update($save);
                if(!$row){
                    throw  new Exception('审核申请失败');
                }
                if($row != count($ids)){
                    throw  new Exception('审核申请数据错误');
                }
                //拒绝申请则发生退款行为
                $str='通过';
                if($type==4){
                    $str='拒绝';
                    $data=Db::name('withdraw')
                        ->whereIn('withdraw_id',$ids)
                        ->select();
                    $earnings_data=[];//收益记录
                    $msg_data=[];//消息记录
                    foreach ($data as $v){
                        //返还收益
                        $m = Member::get($v['member_id']);
                        $old = $m['balance'];
                        $m->balance = round($old + $v['money'],2);
                        if(!$m->save()){
                            throw new Exception('退还收益失败');
                        }
                        $earnings_data[]=[
                            'member_id'=>$v['member_id'],
                            'money'=>$v['money'],
                            'old'=>$old,
                            'surplus'=>round($old + $v['money'],2),
                            'type'=>1,
                            'remark'=>'提现申请被拒绝，退还提现申请金额。提现单号：'.$v['order_no'].'提现金额：'.$v['money'],
                            'create_time'=>$nt
                        ];
                        $msg_data[] = [
                            'member_id'=>$v['member_id'],
                            'content'=>'提现申请被拒绝！提现单号：'.$v['order_no'].'提现金额：'.$v['money'],
                            'create_time'=>$nt
                        ];
                    }
                    //收益记录
                    if(!Db::name('journal_capital')->insertAll($earnings_data)){
                        throw new Exception('收益记录处理失败');
                    }
                    //站内消息
                    if(!Db::name('message')->insertAll($msg_data)){
                        throw new Exception('站内消息处理失败');
                    }

                }

                $this->err['code']=0;

                //提交事务
                Db::commit();
                //添加日志
                $this->addLog(3,"{$str}提现审核，{$row}条");
            }catch (Exception $e){
                //回退事务
                Db::rollback();
                $this->err['msg']=$e->getMessage();
            }
            return json($this->err);
        }
    }

    //转账
    public function transfer(){
        if(Request::isAjax()){
            $ids=input('ids');
            $nt=time();
            //开启事务
            Db::startTrans();
            try{
                //重载IDS
                $ids=Db::name('withdraw')
                    ->whereIn('withdraw_id',$ids)
                    ->where('status',1)
                    ->column('withdraw_id');
                if(!$ids){
                    throw  new Exception('请选择待审核的申请');
                }
                //修改状态
                $row=Db::name('withdraw')
                    ->whereIn('withdraw_id',$ids)
                    ->update(['status'=>2,'success_time'=>$nt]);
                if(!$row){
                    throw  new Exception('提现转账失败');
                }

                $this->err['code']=0;
                //提交事务
                Db::commit();
                //添加日志
                $this->addLog(3,"提现转账，{$row}条");

            }catch (Exception $e){
                //回退事务
                Db::rollback();
                $this->err['msg']=$e->getMessage();
            }
            return json($this->err);
        }
    }


    /**************************推广记录*************************/

    //列表
    public function popularize(){
        if(Request::isAjax()){
            $map=[];
            $listRow=input('limit');
            $where=input('where',[]);
            if(!empty($where)){
                //学员筛选
                if(!empty($where['member'])){
                    $res=Db::name('member')
                        ->whereLike('nickname|mobile',"%{$where['member']}%")
                        ->column('member_id');
                    $map[]=$res?['member_id|child_id|parent_id','in',$res]:['member_id','=',-1];
                }
                //日期筛选
                if(!empty($where['start_stop'])){
                    $ss=explode(" _ ",$where['start_stop']);
                    $map[]=['create_time','between time',$ss];
                }
            }
            //获取数据
            $data=Popularize::with(['c','p','m'])
                ->where($map)
                ->order('create_time desc')
                ->paginate($listRow);

            return json(['code'=>0,'msg'=>'','count'=>$data->total(),'data'=>$data->items()]);
        }else{
            $this->assign('nav_title','admin/vip/popularize');
            return view('popularize');
        }
    }

    /****************************资金流水************************/
    public function journal(){
        if(Request::isAjax()){
            $map=[];
            $listRow=input('limit');
            $where=input('where',[]);
            if(!empty($where)){
                //学员筛选
                if(!empty($where['member'])){
                    $res=Db::name('member')
                        ->whereLike('nickname|phone|realname',"%{$where['member']}%")
                        ->column('member_id');
                    $map[]=$res?['member_id','in',$res]:['member_id','=',-1];
                }
                //日期筛选
                if(!empty($where['start_stop'])){
                    $ss=explode(" _ ",$where['start_stop']);
                    $map[]=['create_time','between time',$ss];
                }
            }
            //获取数据
            $data=JournalCapital::with('m')
                ->where($map)
                ->order('create_time desc')
                ->paginate($listRow);

            return json(['code'=>0,'msg'=>'','count'=>$data->total(),'data'=>$data->items()]);
        }else{
            $this->assign('nav_title','admin/vip/journal');
            return view('journal');
        }
    }


    //手动发送消息
    public function message(){
        if(Request::isAjax()){
            $data=input('post.');
            $nt=time();
            try{
                //验证规则
                $rule = [
                    'mobile'  => 'require',
                    'message'  => 'require',
                ];
                $field = [
                    'mobile'  => '手机',
                    'message'  => '消息内容',
                ];
                $validate=Validate::make($rule,[],$field);
                if(!$validate->check($data)){
                    throw new Exception($validate->getError());
                }
                //验证手机
                if(strtoupper($data['mobile'])!=="ALL"){
                    $member=Db::name('member')
                        ->field('member_id,nickname')
                        ->where('mobile',$data['mobile'])
                        ->find();
                    if(!$member){
                        throw new Exception('手机账号不存在');
                    }
                }else{
                    $member=[
                        'member_id'=>0,
                        'nickname'=>'所有人',
                    ];
                }

                //发送消息
                $msg_data=[
                    'content'=>$data['message'],
                    'member_id'=>$member['member_id'],
                    'create_time'=>$nt
                ];
                Db::name('message')->insert($msg_data);
                $this->err['code']=0;
                $this->err['msg']="发送消息成功！";
                //添加日志
                $this->addLog(1,"发送消息给{$member['nickname']}");
            }catch (Exception $e){
                $this->err['msg']=$e->getMessage();
            }

            return json($this->err);
        }else{

            $this->assign('nav_title','admin/vip/message');

            return view('message_send');
        }

    }


    /**************************公共*************************/



    public function _empty()
    {
        //把所有城市的操作解析到city方法
        return view('public/404');
    }

}
