<?php
/*
 * 商品管理
 * */
namespace app\admin\controller;


use app\admin\model\Classify;
use app\admin\model\Goods;
use app\admin\model\Navi;
use think\Db;
use think\Exception;
use think\facade\Request;
use think\facade\Validate;


class Shop extends BaseUser
{
    //中间件
    protected $middleware = [
        'app\admin\middleware\Auth' => [
            //无须权限验证
            'except' => ['guide','uploadImage','_empty','uploadImages']
        ],
    ];


    protected $pid=2;
    protected $left_menus=[];
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->assign('nav_path',Db::name('menus')->where('id',$this->pid)->value('link'));
        $left_menus=$this->getNav($this->pid);
        $this->left_menus=$left_menus;
        $this->assign("left_menus",$left_menus);

    }

    public function guide(){
        if(count($this->left_menus)){
            $menu=array_shift($this->left_menus);
            return redirect($menu['link']);
        }else{
            return view('public/guide');
        }

    }

    /**********************商品管理***********************/

    //列表
    public function goods()
    {
        if(Request::isAjax()){
            $map=[];

            $listRow=input('limit');
            $title=input('title','');
            if(!empty(trim($title))){
                $map[]=['goods_name','like',"%{$title}%"];
            }

            //获取数据
            $data=Goods::where($map)
                ->order('create_time desc')
                ->paginate($listRow);

            return json(['code'=>0,'msg'=>'','count'=>$data->total(),'data'=>$data->items()]);
        }else{

            $this->assign('nav_title','admin/shop/goods');

            return view('goods');
        }

    }

    //编辑页
    public function goodsEdit(){
        $id=input('id',0);
        if(Request::isAjax()){
            $data=input('post.');
            try{
                $rule=[
                    'goods_name'=>'require|max:255',
                    'images'=>'require',
                ];
                $field=[
                    'goods_name'=>'商品名称',
                    'images'=>'图片',
                ];
                $validate=Validate::make($rule,[],$field);
                if(!$validate->check($data)){
                    throw new Exception($validate->getError());
                }
                $data['images'] = explode(',',$data['images']);
                unset($data['id'],$data['pics']);
                if(!isset($data['comment_show'])){
                    $data['comment_show']=0;
                }
                if(!isset($data['detail_show'])){
                    $data['detail_show']=0;
                }
                if($id){
                    $info=Goods::find($id);
                    if(!$info){
                        throw new Exception('参数错误');
                    }
                    $type=3;
                    $data['update_time']=time();
                    /****若图片更改，则删除原图****/
                    //获取原图
                    $old_images=$info['images'];
                    $res=$info->save($data);
                    if($res && is_array($old_images) && (array_diff($old_images,$data['images']) || array_diff($data['images'],$old_images))){
                        //删除原产品图组
                        foreach ($old_images as $val){
                            if(!in_array($val,$data['images'])){
                                @unlink('.'.$val);
                            }
                        }
                    }

                }else{
                    $type=1;
                    $res=Goods::create($data);
                }
                if(!$res){
                    throw new Exception('网络延迟，稍后再试');
                }
                $this->err['code']=0;
                $this->err['msg']=($type==1?"添加":"修改")."商品【{$data['goods_name']}】".'成功！';
                //添加日志
                $this->addLog($type,$this->err['msg']);
            }catch (Exception $e){
                $this->err['msg']=$e->getMessage();
            }

            return json($this->err);
        }else{

            if($id){
                $info=Goods::find($id);
                $info['pics'] = count($info['images'])?implode(',',$info['images']):'';
                $this->assign('info',$info);
            }

            $this->assign('nav_title','admin/shop/goods');
            return view('goods_edit');
        }

    }

    //快捷修改
    public function changeGoods(){
        if(Request::isAjax()){
            $id=input('id');

            $info=Goods::get($id);
            if(!$info){
                $this->err['msg']='未知参数';
                return json($this->err);
            }
            $field=input('post.field','');
            $value=input('post.value','');
            if(!$field || strlen($value)<1){
                $this->err['msg']='未知参数';
                return json($this->err);
            }
            $info[$field]=$value;
            $row=$info->save();
            if($row){
                $this->err['code']=0;
                $this->err['data']=$value;
                $t_s=[
                    'sort'=>'排序',
                    'status'=>'状态',
                    'goods_name'=>'名称',
                ];

                //添加日志
                $this->addLog(3,'修改商品【'.$info['goods_name'].'】'.$t_s[$field]);
            }else{
                $this->err['msg']='网络延迟，稍后再试';
            }

            return json($this->err);
        }
    }

    //删除
    public function goodsDel(){

        $id=input('id');

        $info=Video::get($id);
        try{
            if(!$info){
                throw new Exception('未知的参数');
            }
            $title=$info['title'];
            if(!$info->delete()){
                throw new Exception('网络延迟，稍后重试');
            }
            $this->err['code']=0;
            //添加日志
            $this->addLog(2,'删除视频【'.$title.'】');
        }catch (Exception $e){
            $this->err['msg']=$e->getMessage();
        }
        return json($this->err);
    }


/********************************商品分类********************************/
    //列表
    public function classify(){
        if(Request::isAjax()){
            $map=[];

            $listRow=input('limit');
            $title=input('title','');
            if(!empty(trim($title))){
                $map[]=['goods_name','like',"%{$title}%"];
            }

            //获取数据
            $data=Classify::with('p')
                ->where($map)
                ->order('create_time desc')
                ->paginate($listRow);

            return json(['code'=>0,'msg'=>'','count'=>$data->total(),'data'=>$data->items()]);
        }else{

            $this->assign('nav_title','admin/shop/classify');

            return view('classify');
        }
    }

    //编辑
    public function classifyEdit(){
        $id = input('id',0);
        if(Request::isAjax()){
            $data=input('post.');
            unset($data['images'],$data['id']);
            try{

                if(!isset($data['classify_name']) || !$data['classify_name']){
                    throw new Exception('参数错误！');
                }
                $path = '0';
                if($data['parent_id']){
                    $parent = Db::name('classify')->find($data['parent_id']);
                    $data['level'] = $parent['level'] + 1;
                    $path = $parent['path'];
                }
                if($id){
                    $type=3;
                    $info=Classify::get($id);
                    if(!$info){
                        throw new Exception('无效的参数');
                    }
                    $old_pic=$info->cover;
                    $data['path'] = $path.'-'.$id;
                    $data['update_time'] = time();
                    $res=$info->save($data);
                    if(!$res){
                        throw new Exception('网络延迟，稍后再试');
                    }
                    if(!empty($old_pic) && $old_pic!=$data['cover']){
                        //删除原图片文件
                        @unlink('.'.$old_pic);
                    }

                }else{
                    $type=1;
                    $res=Classify::create($data);
                    if(!$res){
                        throw new Exception('网络延迟，稍后再试');
                    }
                    $res->path=$path.'-'.$res['classify_id'];
                    $res->save();
                }

                $this->err['code']=0;
                $this->err['msg']=($type == 1?"添加":"修改")."分类【{$data['classify_name']}】成功！";
                //添加日志
                $this->addLog($type,$this->err['msg']);
            }catch (Exception $e){
                $this->err['msg']=$e->getMessage();
            }

            return json($this->err);
        }else{
            if($id){
                $info = Classify::get($id);
                $this->assign('info',$info);
            }
            //上级分类
            $data = Classify::field("classify_id,classify_name,path")
                ->where('level','<',3)
                ->order('path')
                ->select()->toArray();
            $this->assign('data',$data);

            $this->assign('nav_title','admin/shop/classify');
            return view('classify_edit');
        }
    }

    //快捷修改
    public function changeClassify(){
        if(Request::isAjax()){
            $id=input('id');

            $info=Classify::get($id);
            if(!$info){
                $this->err['msg']='未知参数';
                return json($this->err);
            }
            $field=input('post.field','');
            $value=input('post.value','');
            if(!$field || strlen($value)<1){
                $this->err['msg']='未知参数';
                return json($this->err);
            }
            $info[$field]=$value;
            $row=$info->save();
            if($row){
                $this->err['code']=0;
                $this->err['data']=$value;
                $t_s=[
                    'sort'=>'排序',
                    'status'=>'状态',
                    'classify_name'=>'名称',
                ];

                //添加日志
                $this->addLog(3,'修改商品分类【'.$info['classify_name'].'】'.$t_s[$field]);
            }else{
                $this->err['msg']='网络延迟，稍后再试';
            }

            return json($this->err);
        }
    }

    //删除
    public function classifyDel(){
        $id=input('id');

        $info=Classify::get($id);
        try{
            if(!$info){
                throw new Exception('未知的参数');
            }
            $title=$info['classify_name'];
            if(!$info->delete()){
                throw new Exception('网络延迟，稍后重试');
            }
            $this->err['code']=0;
            //添加日志
            $this->addLog(2,'删除商品分类【'.$title.'】');
        }catch (Exception $e){
            $this->err['msg']=$e->getMessage();
        }
        return json($this->err);
    }

    /*************************************分类导航***********************************/
    //列表
    public function navi(){
        if(Request::isAjax()){
            $listRow=input('limit');
            //获取数据
            $data=Navi::with('p')
                ->order('create_time desc')
                ->paginate($listRow);

            return json(['code'=>0,'msg'=>'','count'=>$data->total(),'data'=>$data->items()]);
        }else{

            $this->assign('nav_title','admin/shop/navi');

            return view('navi');
        }
    }

    //编辑
    public function naviEdit(){
        $id = input('id',0);
        if(Request::isAjax()){
            $data=input('post.');
            unset($data['images'],$data['id']);
            try{

                if(!isset($data['navi_name']) || !$data['navi_name']){
                    throw new Exception('参数错误！');
                }

                if($id){
                    $type=3;
                    $info = Navi::get($id);
                    if(!$info){
                        throw new Exception('无效的参数');
                    }
                    $old_pic=$info->cover;
                    $data['update_time'] = time();
                    $res=$info->save($data);
                    if(!$res){
                        throw new Exception('网络延迟，稍后再试');
                    }
                    if(!empty($old_pic) && $old_pic!=$data['cover']){
                        //删除原图片文件
                        @unlink('.'.$old_pic);
                    }

                }else{
                    $type=1;
                    $res = Navi::create($data);
                    if(!$res){
                        throw new Exception('网络延迟，稍后再试');
                    }
                }

                $this->err['code']=0;
                $this->err['msg']=($type == 1?"添加":"修改")."分类导航【{$data['navi_name']}】成功！";
                //添加日志
                $this->addLog($type,$this->err['msg']);
            }catch (Exception $e){
                $this->err['msg']=$e->getMessage();
            }

            return json($this->err);
        }else{
            if($id){
                $info = Navi::get($id);
                $this->assign('info',$info);
            }
            //上级分类
            $data = Db::name('navi')
                ->field("navi_id,navi_name")
                ->where('parent_id',0)
                ->order('sort')
                ->select()->toArray();
            $this->assign('data',$data);

            $this->assign('nav_title','admin/shop/navi');
            return view('navi_edit');
        }
    }

    //快捷修改
    public function changeNavi(){
        if(Request::isAjax()){
            $id=input('id');

            $info=Navi::get($id);
            if(!$info){
                $this->err['msg']='未知参数';
                return json($this->err);
            }
            $field=input('post.field','');
            $value=input('post.value','');
            if(!$field || strlen($value)<1){
                $this->err['msg']='未知参数';
                return json($this->err);
            }
            $info[$field]=$value;
            $row=$info->save();
            if($row){
                $this->err['code']=0;
                $this->err['data']=$value;
                $t_s=[
                    'sort'=>'排序',
                    'status'=>'状态',
                    'navi_name'=>'名称',
                ];

                //添加日志
                $this->addLog(3,'修改分类导航【'.$info['navi_name'].'】'.$t_s[$field]);
            }else{
                $this->err['msg']='网络延迟，稍后再试';
            }

            return json($this->err);
        }
    }

    //删除
    public function naviDel(){
        $id=input('id');

        $info=Navi::get($id);
        try{
            if(!$info){
                throw new Exception('未知的参数');
            }
            $title=$info['navi_name'];
            if(!$info->delete()){
                throw new Exception('网络延迟，稍后重试');
            }
            $this->err['code']=0;
            //添加日志
            $this->addLog(2,'删除分类导航【'.$title.'】');
        }catch (Exception $e){
            $this->err['msg']=$e->getMessage();
        }
        return json($this->err);
    }


    /*************************************关键词***********************************/





    /*************************************公共***********************************/

    //上传图片
    public function uploadImage(){
        //大小限制
        $size=config('image_upload_size');
        //类型限制
        $ext=config('image_upload_extension');
        //上传处理
        $this->err = $this->uploadFiles('images','./uploads/classify',$size,$ext);

        return json($this->err);
    }

    //上传商品图片
    public function uploadImages(){
        //大小限制
        $size=config('image_upload_size');
        //类型限制
        $ext=config('image_upload_extension');
        //上传处理
        $this->err = $this->uploadFiles('pics','./uploads/goods',$size,$ext);

        return json($this->err);
    }

    public function _empty()
    {
        //把所有城市的操作解析到city方法
        return view('public/404');
    }

}
